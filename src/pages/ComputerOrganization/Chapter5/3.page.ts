import { p, section } from '@src/components/@write'
const title = '5.3　基本术语解释'
const page = section(title)(
    section('指令周期（instruction cycle）')(
        p`指令周期是指从取出一条指令执行到取下一条指令执行的间隔时间。因此，一般把一条指令从存储器读出到执行完成所用的全部时间称为指令周期。一个指令周期中要完成多个步骤的操作，包括取指令、指令译码、计算操作数地址、取操作数、运算、送结果、中断检测等。`
    ),
    section('机器周期（machine cycle）')(
        p`在一个指令周期中，最复杂的操作是访问存储器取指令或读/写数据，或者访问 I/O 接口以读/写数据。这些操作都涉及总线操作，即通过系统总线来和 CPU 之外的部件进行信息交换。因此，通常把 CPU 通过一次总线事务访问一次主存或 I/O 接口的时间称为机器周期。`,
        p`一个指令周期包含多个机器周期。不同机器的指令周期所包含的机器周期数不同。典型的机器周期包括取指令、主存读（间址周期是一种主存读机器周期）、主存写、I/O 读、I/O 写、中断响应等操作。一台计算机的机器周期类型是确定的。`,
        p`现代计算机采用 CPU 片内 cache 来存放指令和数据，指令和数据的获取、数据的运算和传输都非常快，所以，一条指令的执行在若干个时钟周期内就可以完成，不再将指令周期细分为若干机器周期。`
    ),
    section('同步系统（synchronous system）')(
        p`系统中的所有动作都有专门的时序信号来定时，最基本的时序信号就是时钟，同步系统通过时钟规定何时发出什么动作。例如，在 CPU 内部，一个指令的执行要完成数据信息的读/写、内部数据的传送或运算等。因此，指令的执行过程必须分解成若干步骤和相应的动作来完成，每一步动作都要有相应的控制信号进行控制，这些控制信号何时发出、作用时间多长，都要有相应的定时信号进行同步。`
    ),
    section('时序信号（timing signal）')(
        p`时序信号指同步系统中用于进行同步控制的定时信号。早期计算机的处理器设计，是采用机器周期—节拍—工作脉冲三级时序系统。现代计算机一般只用一个专门的时钟信号来进行定时，因此现代计算机的时序信号就是时钟信号。`
    ),
    section('控制单元（Control Unit，CU）')(
        p`控制单元也称为控制部件、控制逻辑或控制器。其作用是对指令进行译码，将译码结果和状态/标志信号和时序信号等进行组合，产生各种操作控制信号。这些控制信号被送到 CPU 内部或通过总线送到主存或 I/O 模块。控制单元是整个 CPU 的指挥控制中心，通过规定各部件在何时做什么动作来控制数据的流动，以完成指令的执行。`
    ),
    section('执行部件（Execute Unit，EU）')(
        p`执行部件也称为操作部件或功能部件，由控制部件 CU 发来的操作控制信号进行控制，以完成特定的功能。执行部件有两种类型：一种是用组合逻辑电路实现的「操作元件」，用于进行数据运算、数据传送等，如 ALU、总线、扩展器、多路选择器等；另一种是用时序逻辑电路实现的「状态元件」，用于进行数据存储，如触发器、寄存器、存储器等。`
    ),
    section('组合逻辑电路（combinational logic circuit）')(
        p`组合逻辑电路简称组合电路，用来构成操作元件。组合逻辑电路在逻辑功能上的特点是，任意时刻的输出仅取决于该时刻的输入，与电路原来的状态无关，因此它没有存储功能。`
    ),
    section('时序逻辑电路（sequential logic circuit）')(
        p`时序逻辑电路简称时序电路，用来构成状态元件。时序逻辑电路在逻辑功能上的特点是，任意时刻的输出不仅取决于当时的输入信号，还取决于电路原来的状态，或者说还与以前的输入有关。时序逻辑电路具有存储功能，能保存所存储的状态。`
    ),
    section('多路选择器（multiplexor）')(p`多路选择器也称为数据选择器或多路复用器。它根据控制线路的设置，选择多个输入信号中的一个进行输出。`),
    section('定时方式（clocking methodology）')(p`在时序电路中，定时方式规定了状态存储元件何时读出信号、何时写入信号。一般采用边沿触发的定时方式。`),
    section('边沿触发（edge-triggered）')(
        p`边沿触发是指规定存储元件中的状态只允许在时钟跳变边沿改变。时钟信号的跳变有正跳变和负跳变两种。在时钟的上升沿进行的跳变为正跳变；在时钟的下降沿进行的跳变为负跳变。`
    ),
    section('寄存器堆（register file）')(
        p`寄存器堆就是寄存器集合，因此也称为通用寄存器组（General Register Stack，GRS）。其中的寄存器可以通过给定相应的寄存器编号进行读写。在指令中用编号标识寄存器。执行指令时，指令中的寄存器编号被送到一个地址译码器进行译码，选中某个寄存器进行写入，读出时，寄存器编号作为控制信号来控制一个多路选择器，选择相应的寄存器读出。实质上它是 CPU 中暂时存放数据的地方，里面保存着那些等待处理的数据或已经处理过的数据，CPU 访问寄存器所用的时间要比访问内存的时间短。采用寄存器，可以减少 CPU 访问内存的次数，从而加快指令执行的速度。不过，因为受到芯片面积和集成度的限制，寄存器堆的容量不可能很大。`
    ),
    section('寄存器写信号（register write）')(
        p`寄存器堆中的寄存器是由触发器构成的，而触发器输出状态的变化只能发生在时钟边沿，因此寄存器写控制信号在时钟边沿有效。时钟边沿到来时，事先稳定在输入端的数据开始向寄存器写入，经过一段时间延迟（这个延迟时间称为 Click-to-Q）才能稳定地写入寄存器并输出，因此，时钟边沿到来时，在寄存器输出端的数据实际上还是上一个时钟周期内的老数据。`
    ),
    section('指令存储器（instruction memory）')(
        p`指令存储器是专门存放指令的存储器，也称为代码存储器（code memory）。实际上，现代计算机中，CPU 内的一级 cache 采用数据 cache 和代码 cache 分离的方式，因此指令存储器实际上是 CPU 中的代码 cache。`
    ),
    section('数据存储器（data memory）')(
        p`数据存储器是专门存放数据的存储器。实际上，现代计算机中，CPU 内的一级 cache 采用数据 cache 和代码 cache 分离的方式，因此数据存储器实际上是 CPU 中的数据 cache。`
    ),
    section('指令译码器（instruction decoder）')(
        p`指令译码器是用来对指令的操作码进行译码的部件。在设计指令系统时，对每条功能不同的指令操作码进行了编码。因此，执行指令时，必须要有相应的译码电路对每个操作码进行译码解释。指令译码器的输入是指令操作码，输出结果用来和其他信号（如时序信号、机器状态信号、指令结果标志信号等）一起组合生成控制信号。不同的指令译码结果生成控制信号的不同取值，以控制执行部件完成不同的功能。`
    ),
    section('控制信号（control signal）')(
        p`控制信号也称为操作控制信号或微操作信号。控制器中的指令译码器对指令进行译码，将译码结果与状态/标志信号、时序信号等进行组合，产生各种操作控制信号。这些控制信号被送到 CPU 内部或通过总线送到主存或 I/O 模块。送到 CPU 内部的控制信号用于控制 CPU 内部数据通路的执行，送到主存或 I/O 模块的信号用于控制 CPU 和主存或 CPU 和 I/O 模块之间的信息交换。`
    ),
    section('时钟周期（clock cycle）')(
        p`现代计算机的 CPU 采用时钟信号进行定时控制。若采用时钟边沿触发，则只有在时钟的上升沿或下降沿到来时，才能把一个新的值写到一个状态单元中。所以，CPU 的时钟周期应该为所有相邻状态单元之间的组合逻辑电路中最长的延时，以保证在一个时钟周期内所有组合电路能完成必要的数据处理工作。`
    ),
    section('主频（CPU clock rate/frequency）')(p`CPU 的主频就是 CPU 时钟周期的倒数。`),
    section('指令流水线（instruction pipelining）')(
        p`指令流水线是多条指令重叠执行的一种指令执行方式。在流水线方式下，一条指令的执行过程被分成若干个操作子过程（也称为「流水段」），每个子过程由一个独立的功能部件来完成。在同一条流水线中，每条指令所包含的操作子过程个数必须一样，每个子过程所花的时间也要设计成相同的。因此，一般按最复杂的指令来设计流水段个数，以最复杂的子过程来设计流水段的宽度。这样，所有功能部件可以同时执行不同指令的不同子过程中的操作，即第 i+1 条指令的第 k 段和第 i 条指令的第 k+1 段同时执行。在理想情况下，经过若干周期后，流水线能在每个周期内执行完一条指令。`,
        p`现代计算机一般把复杂度相近的指令用同一条流水线完成，而把复杂度相差很大的指令安排在不同的流水线中完成。`
    ),
    section('流水线深度（pipeline depth）')(p`流水段的个数称为流水线深度或流水线级数。`),
    section('指令吞吐率（instruction throughput）')(
        p`指令吞吐率是指单位时间内处理器执行指令的条数。采用流水线指令执行方式能提高指令的吞吐率，但不能缩短每条指令的执行时间。`
    ),
    section('流水段寄存器（pipeline register）')(
        p`每两个相邻的流水段之间需要设置一个流水段寄存器，用来存放前一个流水段中产生的并需要传输到其后所有流水段的信息，包括各种数据（PC、指令、立即数、运算结果、寄存器号等）和控制信号两大类信息。每个流水段的功能不一样，所需传递的信息也不同，因此各流水段寄存器的长度也不同。`
    ),
    section('流水线冒险（hazard）')(
        p`当若干指令都已进入流水线开始执行后，如果其中某些后续指令的某些流水段任务不能按时开始执行（若执行就会发生错误），则说明流水线被破坏，这种现象称为流水线冒险。流水线冒险有结构冒险、控制冒险及数据冒险三种类型。`
    ),
    section('结构冒险（structural hazard）')(
        p`在指令流水线中，同一个部件同时被不同指令所使用的现象称为结构冒险，也称为资源冲突（resource conflict）。`
    ),
    section('控制冒险（control hazard）')(
        p`在指令流水线中，转移指令或异常等情况改变了程序执行的流程，而使得在目标地址产生前已被取到流水线中的指令无效，这种现象称为控制冒险，也称为分支冒险（branch hazard）或控制相关（control dependency）或顺序相关（sequential dependency）。`
    ),
    section('数据冒险（data hazard）')(
        p`在指令流水线中，后面指令用到前面指令的结果时，前面指令的结果还没产生的现象称为数据冒险，也称为数据相关（data dependency）。`
    ),
    section('流水线阻塞（pipeline stall）/气泡（bubble）')(
        p`流水线中下一条指令不能执行时，就在硬件上加入额外的电路来使得下一条指令延迟若干周期再执行，这种方式称为流水线阻塞或流水线停顿。有时也会形象地称这种做法为在流水线中插入气泡（bubble）。`
    ),
    section('空操作（nop）')(
        p`空操作就是不做任何动作，而只是在时间上延迟一段时间。有两种情况：① 为了规整流水线，在某些指令的执行过程中加入空流水段，这种空流水段中的操作称为空操作；② 为了避免流水线冒险，在相关指令的前后加入 nop 指令，使得流水线停顿若干时钟，等到需要的信息得到后再继续执行后面的指令。`
    ),
    section('转发（forwarding）')(
        p`当后面指令要用到前面指令的结果数据时，前面流水段部件中得到的数据直接通过连线传送到后面流水段的部件中，而不等待前面指令的结束，这种方式称为转发或旁路，它能解决部分数据冒险。`
    ),
    section('旁路（bypassing）')(p`旁路是数据转发技术的别称。`),
    section('指令级并行（Instruction Level Parallelism，ILP）')(
        p`指令级并行是在 CPU 执行程序时，通过多条指令之间的并行执行来提高处理器性能的一种技术。`
    ),
    section('IPC（Instruction Per Clock）')(p`IPC 是每个时钟周期内可以执行完成的指令条数，是 CPI 的倒数。`),
    section('超流水线（superpipelining）')(
        p`超流水线是指具有更多级流水段的一种流水线。理想情况下，流水线阶段越多，则指令的吞吐率越高，所以一些处理器采用 8 个或更多流水阶段，称为超流水线。`
    ),
    section('超长指令字（Very Long Instruction Word，VLIW）')(
        p`通过编译器静态推测来辅助完成指令打包和冒险处理时，通常将一个周期内发射的多个指令预先组织为一条具有多个操作的长指令，这种由多条指令打包生成的指令称为超长指令字，执行这种超长指令字的处理器称为 VLIW 处理器。`
    ),
    section('超标量流水线（superscalar）')(
        p`若干条指令（如整数运算、浮点运算、装入/存储等）同时启动并独立进入流水线执行，即每个时钟周期发射多条指令，有多套取指部件和指令译码部件，并且同时有多条指令执行，所以应有多个执行部件。如定点处理部件、浮点处理部件、乘/除法部件、取数/存数部件等。超标量流水线是一种多指令发射（multiple-instruction issue）方式。`
    ),
    section('动态流水线（dynamic pipelining）')(
        p`动态流水线通过指令相关性检测和动态分支预测等手段，投机性地不按指令顺序执行，当发生流水线阻塞时，可以到后面找指令来执行。动态流水线的通用模型由以下主要单元组成：指令预取和分发单元、执行单元、提交单元。这种调整指令执行顺序的方式称为动态流水线调度（dynamic pipeline scheduling）。`
    ),
    section('静态多发射（static multiple issue）')(
        p`通过编译器静态推测来辅助完成指令打包和冒险处理。通常将一个周期内发射的多个指令预先组织为一条多个操作的长指令，称为一个「发射包」。静态多发射处理器主要考虑处理数据冒险和控制冒险。`
    ),
    section('动态多发射（dynamic multiple issue）')(
        p`通过在指令执行过程中由处理器硬件动态完成流水线调度来完成指令打包和冒险处理。目前的超标量处理器大多采用动态多发射流水线。`
    ),
    section('乱序执行（out-of-order execution）')(
        p`在指令执行单元有很多指令同时被执行，而且每种指令所用的执行时间也不一样，所以无法按照程序中原来的顺序执行指令，因此在动态流水线中，指令一定是乱序执行的。`
    )
).elem
