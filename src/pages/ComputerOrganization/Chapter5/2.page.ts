import { p, section } from '@src/components/@write'
const title = '5.2　主要内容提要'
const page = section(title)(
    section(`程序执行概述`)(
        p`从第 4 章的内容可知，可执行目标文件中主要包含程序代码和数据，而程序代码由一条一条指令构成，指令按顺序存放在存储空间的连续单元中。在正常情况下，指令按其存放顺序执行，遇到需要改变程序执行流程的时候，用相应的转移类指令（包括无条件转移指令、条件转移指令、调用指令和返回指令等）来改变程序执行流程。即将执行的指令所在存储单元的地址由程序计数器 PC 给出。CPU 取出并执行一条指令的时间称为指令周期，不同指令的指令周期可能不同。`,
        p`程序的执行过程就是其包含的指令序列的执行过程。`
    ),
    section(`指令执行过程`)(
        p`指令的执行过程大致分为取指、译码、取数、运算、存结果、查中断等步骤。指令周期是指取出并执行一条指令的时间，它由若干个机器周期或直接由若干个时钟周期组成。`,
        p`早期的机器因为没有引入 cache，所以每个指令周期都要执行一次或多次总线操作，以访问主存读取指令或进行数据的读写，因而将指令周期分成若干机器周期，每个机器周期对应 CPU 内部操作或某种总线事务类型，一个总线事务访问一次主存或 I/O 接口。因为一个总线事务中需要送地址和读写命令、等待主存进行读写操作等，需要多个时钟周期才能完成，所以一个机器周期又由多个时钟周期组成。`,
        p`现代计算机引入 cache 后，大多数情况下都不需要访问主存，而可以直接在 CPU 内的 cache 中读取指令或访问数据，因此每个指令周期直接由若干个时钟周期组成。时钟是 CPU 中用于控制同步的信号，时钟周期是 CPU 中最小的时间单位。`
    ),
    section(`程序正常执行过程的打断`)(
        p`从开机后 CPU 被加电开始，到断电为止，CPU 一直在执行指令。每条指令的执行都会改变 PC 中的值，因而 CPU 能够不断地执行新的指令。如果没有遇到特殊的情况，CPU 将一直按照程序中给定的正常指令顺序执行下去。不过，程序并不总是能按正常顺序执行，有时 CPU 会遇到一些特殊情况而无法继续执行当前程序。`,
        p`一方面，CPU 执行指令过程中，会发生诸如除数为 0、溢出、断点、单步跟踪等 CPU 内部异常事件；另一方面，程序执行过程中，若外设完成任务或发生某些特殊事件，例如打印机缺纸、定时采样计数时间到、键盘缓冲区已满、从网络中接收到一个信息包、从磁盘读入了一块数据等，设备控制器会向 CPU 发中断请求，要求 CPU 对这些情况进行处理，这种情况称为外部中断。`,
        p`CPU 在遇到内部异常或外部中断情况时，会中止正在执行的程序，转到操作系统内核提供的异常处理程序或中断服务程序执行。`
    ),
    section(`CPU 的基本功能和基本组成`)(
        p`CPU 总是周而复始地执行指令，并在执行指令过程中检测和处理内部异常事件和外部中断请求。在此过程中，要求 CPU 具有以下功能。`,
        p`① 取指令并译码：从存储器取出指令，并对指令操作码译码，以控制 CPU 进行相应的操作。`,
        p`② 计算 PC 的值：通过自动计算 PC 的值来确定下条指令地址，以正确控制执行顺序。`,
        p`③ 算术逻辑运算：计算操作数地址，或对操作数进行算术或逻辑运算。`,
        p`④ 取操作数或写结果：通过控制对存储器或 I/O 接口的访问来读取操作数或写结果。`,
        p`⑤ 异常或中断处理：检测有无异常事件或中断请求，必要时响应并调出相应处理程序执行。`,
        p`⑥ 时序控制：通过生成时钟信号来控制上述每个操作的先后顺序和操作时间。`,
        p`CPU 主要由数据通路（datapath）和控制单元（control unit）组成。`,
        p`数据通路中包含组合逻辑单元和存储信息的状态单元。组合逻辑单元用于对数据进行处理，如加法器、ALU、扩展器（0 扩展或符号扩展）、多路选择器以及总线接口逻辑等；状态单元包括触发器、寄存器等，用于对指令执行的中间状态或最终结果进行保存。`,
        p`控制单元也称为控制器，其主要功能是对取出的指令进行译码，并与指令执行得到的条件码或当前机器的状态、时序信号等组合，生成对数据通路进行控制的控制信号。`
    ),
    section(`数据通路的基本结构`)(
        p`现代计算机都采用时钟信号进行定时，一旦时钟边沿信号到来，数据通路中的状态单元开始写入信息。不同指令的功能不同，所以，每条指令执行时数据在数据通路中所经过的路径及其路径上的部件都可能不同。不过，每条指令在取指令阶段都一样。`,
        p`根据是否将所有部件通过总线相连，可将数据通路分成总线式数据通路和非总线式数据通路；根据指令执行过程是否按流水线方式进行，可将数据通路分成非流水线数据通路和流水线数据通路。总线式数据通路无法实现指令流水线，所以一定是非流水线数据通路。现代计算机都采用流水线数据通路。`,
        p`总线式数据通路中，各个通用寄存器和 ALU 的输入、输出端之间都通过 CPU 内部总线交换数据，因为总线上某一时刻只能传送一个部件送出的信息，所以在总线式 CPU 中执行指令时，每一步都只能串行进行，速度很慢。若将所有部件连接到一个总线上，则是单总线数据通路；也可以将 ALU 的输入和输出端分别连接到不同的两个总线上，构成双总线数据通路；还可以将 ALU 的两个输入端和一个输出端分别连接到三个不同的总线上，构成三总线数据通路。`
    ),
    section(`CPU 中的寄存器`)(
        p`CPU 中存在大量寄存器。根据对用户程序的透明程度，可以将 CPU 中的寄存器分成以下三类。`,
        p`（1）用户可见寄存器`,
        p`用户可见寄存器是指用户程序中的指令可直接访问或间接修改其值的寄存器，包括通用寄存器、地址寄存器和程序计数器。通用寄存器可用于存放地址或数据；地址寄存器专门用于存放首地址或指针信息，如段寄存器、变址寄存器、基址寄存器、栈指针寄存器、帧指针寄存器等；程序计数器用于存放当前或下条指令的地址。`,
        p`（2）用户部分可见寄存器`,
        p`用户部分可见寄存器是指用户程序中的指令只能读取其部分信息的寄存器，如程序状态字寄存器 PSWR 或标志（条件码）寄存器 FLAGS，其内容由 CPU 根据指令执行结果自动设定，用户程序执行过程中可能会隐含读出其部分内容，以确定程序的执行顺序，但不能直接修改这些寄存器的内容。`,
        p`（3）用户不可见寄存器`,
        p`用户不可见寄存器是指用户程序不能进行任何访问操作的寄存器，这些寄存器大多用于记录控制信息和状态信息，只能由 CPU 硬件或操作系统内核程序访问。例如，指令寄存器 IR 用来存放正在执行的指令，只能被硬件访问；存储器地址寄存器 MAR 和存储器数据寄存器 MDR 分别用来存放将要访问的存储单元的地址和数据，也由硬件直接访问。而中断请求寄存器、进程控制块指针寄存器、系统栈指针寄存器、页表基址寄存器等只能由内核程序访问，因此也都是用户不可见寄存器。`
    ),
    section(`指令流水线的设计和实现`)(
        p`指令流水线设计的基本思想是将每条指令的执行规整化为若干个同样的流水段，每个流水段的执行时间相同——都等于一个时钟周期。采用流水线方式执行指令，其吞吐率比采用非流水线方式提高了若干倍，但是对于每一条指令来说，反而比采用非流水线方式延长了执行时间。`,
        p`每个流水段中的部件都是一组组合逻辑加上一组寄存器，组合逻辑中产生的结果在时钟到来时被存到寄存器（如程序计数器、条件码寄存器、流水段寄存器）中。每两个相邻流水段之间的流水段寄存器，用以记录所有在后面阶段要用到的各种信息，例如指令代码、参加运算的操作数、指令运算结果、指令异常信息、寄存器读口地址、寄存器写口地址、存储单元地址、新的 PC 值等。指令译码得到的控制信号也通过流水段寄存器传送到后面各个流水段中。`
    ),
    section(`指令流水线的局限性`)(
        p`在理想情况下，每个时钟到来，都有一条指令进入流水线，也有一条指令执行结束。但是，很多因素会导致指令流水线的情况不那么理想。首先，并不是每条指令都有相同多个流水段，也不是每个流水段的执行都需要一样长的时间，因此，为了能够方便地控制指令流水线的执行，通常以最复杂指令所需阶段数来确定流水段个数，并以最复杂阶段所需时间为基准来设计时钟周期；其次，随着流水线深度的增加，流水段寄存器的读写所带来的额外开销比例也会增大；最后，指令执行时，还会发生资源冲突、数据相关、控制相关、cache 缺失等问题，导致流水线被阻塞，进而延长程序执行时间。`
    ),
    section(`高级流水线实现技术`)(
        p`高级流水线技术充分利用指令级并行（Instruction-Level Parallelism，简称 ILP）来提高流水线的性能。增加指令级并行的策略有两种：一种是超流水线（super-pipelining）技术，通过增加流水线级数来使更多的指令同时在流水线中重叠执行；另一种是多发射流水线（multiple issue pipelining）技术，通过同时启动多条指令（如整数运算、浮点运算、存储器访问等）独立运行来提高指令并行性。多发射流水线技术又可分为静态多发射和动态多发射。前者通过编译器静态地将指令打包，其结果可看作将同时发射的多条指令合并到一个长指令中；后者由处理器硬件动态进行流水线调度来完成「指令打包」和「冒险处理」，能在一个时钟周期内执行一条以上指令，这种动态多发射流水线技术也称为超标量。`
    )
).elem
