import { p, section, precode, img } from '@src/components/@write'
import pic5_6_1 from './5-6-1.jpg'
import pic5_6_2 from './5-6-2.jpg'
import pic5_6_3 from './5-6-3.jpg'
import pic5_6_4 from './5-6-4.jpg'
const title = '5.6　分析应用题'
const page = section(title)(
    section(
        '1.某计算机主频为 800MHz，其 CPU 采用三级时序（机器周期-节拍-脉冲）进行定时，为单脉冲节拍方式，每个机器周期的基本宽度为 4 个节拍。该计算机每个指令周期平均有 5 个机器周期，并平均访问 2 次主存，没有设置 cache。请回答下列问题：'
    )(
        p`（1）若采用异步方式访问内存，每个「存储器读」机器周期平均需 8 个节拍，每个「存储器写」机器周期平均需 6 个节拍，则执行一条指令的平均时间为多少？MIPS 数为多少？平均 CPI 为多少？`,
        p`（2）若采用同步方式访问内存，每个「存储器读」机器周期需在基本宽度的基础上再插入 4 个「等待」状态，每个「存储器写」机器周期无需「等待」状态，则执行一条指令的平均时间为多少？MIPS 数为多少？平均 CPI 为多少？（提示：一个「等待状态」即是一个节拍）`,
        section('分析解答')(
            p`早期的计算机中没有 cache，CPU 访存时，由于主存速度慢，无法像访问寄存器或 cache 那样能在一个节拍内存取好数据，因此，需要 CPU 等待若干个节拍才能完成存储访问。因而「存储器读」和「存储器写」机器周期比基本的无访存操作的机器周期长。`,
            p`（1）CPU 和主存之间采用异步方式通信时，CPU 每次发送读或写命令后，便在随后的每个节拍内采样主存送来的「存储操作完成」（MFC）信号，以便在主存数据准备好时，到存储器数据寄存器（MDR）中取数据。由题意可知，在异步方式下，每条指令的平均时钟周期（节拍）数为（5-2）×4+2×（（8+6）/2）=26，所以 CPI=26。执行一条指令的平均时间为 26×1/（800×106Hz）=0.325ns。MIPS 数约为 800/26=31。`,
            p`（2）CPU 和主存之间采用同步方式通信时，CPU 每次发送读或写命令后，便按照同步通信协议，等待一个固定长度的时间（若干个节拍）后，到存储器数据寄存器（MDR）中取数据。由题意可知，在同步方式下，每条指令的平均时钟周期（节拍）数为（5-2）×4+2×（（4+4+4）/2）=24，所以 CPI=24。执行一条指令的平均时间为 24×1/（800×106Hz）=0.3ns。MIPS 数约为 800/24=33。`
        )
    ),
    section(
        '2.假定在如图 5.1 所示的单总线数据通路中，总线传输延迟和 ALU 运算时间分别是 20ps 和 200ps，寄存器建立时间为 10ps，寄存器保持时间为 5ps，寄存器的锁存延迟（Clk-to-Q time）为 4ps，控制信号的生成延迟（Clk-to-signal time）为 7ps，三态门接通时间为 3ps，则从当前时钟到达开始算起，完成以下操作的最短时间是多少？各需要几个时钟周期？'
    )(
        p`（1）将数据从一个寄存器传送到另一个寄存器。`,
        p`（2）将程序计数器 PC 加 1。`,
        img(pic5_6_1)('图 5.1　单总线数据通路'),
        section('分析解答')(
            p`图 5.1 所示的数据通路中，所有与内部总线相连的寄存器都有相应的 Rin和/或 Rout控制信号，以控制总线和寄存器之间的数据传送。总线和 ALU 输入端之间、Y 寄存器与 ALU 输入端之间都无需控制信号。ALU 输出与 Z 寄存器之间可以有控制信号 Zin，也可以没有。若没有 Zin，则每来一个时钟，ALU 的输出总是被写入 Z 寄存器。以下说明中，为了明显表示 ALU 结果送至 Z 寄存器，假定有控制信号 Zin。`,
            p`图 5.2 给出了单总线数据通路中主要路径的定时。时钟边沿到达后，经过 Clk-to-Q time 的延时，寄存器中的内容被读出，同时，在指令译码器中的控制逻辑生成当前时钟周期内所需的控制信号，其延时为 Clk-to-signal time。随后，由生成的控制信号 Riout 接通三态门，并使寄存器数据在总线上传输。若当前时钟周期内不做 ALU 运算而是直接在寄存器之间传送，则总线上的数据在 Rjin的控制下直接被送到目的寄存器 Rj 的输入端，在下一个时钟边沿到来之前，总线上的数据必须继续稳定一段寄存器建立时间，以使寄存器 Rj 的输入在这段建立时间内保持不变，如图 5.2a 所示；若当前时钟周期内有 ALU 运算，则还需 ALU 电路延时，最后 ALU 结果直接送 Z 寄存器，在下一个时钟边沿到来之前，ALU 的输出必须继续稳定一段寄存器建立时间，以使寄存器 Z 的输入在这段建立时间内保持不变，如图 5.2b 所示。`,
            p`（1）由图 5.2a 可知，寄存器之间进行传送的时间延迟至少为 7ps+3ps+20ps+10ps=40ps。在这个寄存器数据传送过程中，只需要在一个寄存器中保存信息，因此只需要一个时钟周期就可完成该操作。`,
            p`（2）将 PC 中的内容加 1 送 PC，被分解成以下两个过程：PC 加 1 送 Z、Z 送 PC。对于第一个过程，由图 5.2b 可知，其延迟至少为 7ps+3ps+20ps+200ps+10ps=240ps；第二个过程实现的是寄存器之间的传送，因此延迟至少为 40ps。因为在该操作过程中保存了两次信息，所以需要两个时钟周期才能完成该操作。`,
            img(pic5_6_2)('图 5.2　单总线数据通路中主要路径的定时'),
        )
    ),
    section(
        '3.假定某计算机字长 16 位，CPU 内部结构如图 5.1 所示，CPU 和存储器之间采用同步方式通信，按字编址。采用定长指令字格式，指令由两个字组成，第一个字指明操作码和寻址方式，第二个字包含立即数 Imm16。若一次存储访问所用时间为两个时钟周期（用 read1 和 read2 分别表示两个时钟周期内的操作控制信号），每次存储访问存取一个字，取指令阶段第二次访存将 Imm16 取到 MDR 中，请写出下列指令在执行阶段（不考虑取指令过程）的控制信号序列，并说明需要几个时钟周期。'
    )(
        p`（1）将 Imm16 加到寄存器 R1 中，此时，Imm16 为立即操作数，即 R[R1]←R[R1]+Imm16。`,
        p`（2）将存储单元 Imm16 中的内容加到寄存器 R1 中，此时，Imm16 为直接地址，即 R[R1]←R[R1]+M[Imm16]。`,
        p`（3）将存储单元 Imm16 中的内容作为地址访问主存，将读出的内容再作为地址访问主存，然后将读出的内容加到寄存器 R1 中。此时，Imm16 为间接地址，即 R[R1]←R[R1]+M[M[Imm16]]。`,
        section('分析解答')(
            p`图 5.1 所示的数据通路中，所有与内部总线相连的寄存器都有相应的 Rin和/或 Rout控制信号，以控制总线和寄存器之间的数据传送。总线和 ALU 输入端之间、Y 寄存器与 ALU 输入端之间都无需控制信号。ALU 输出与 Z 寄存器之间可以有控制信号 Zin，也可以没有，此时，每来一个时钟，ALU 的输出总是被写入 Z 寄存器。为了明显表示 ALU 结果送至 Z 寄存器，这里假定有控制信号 Zin。`,
            p`另外要说明的是，以下给出的是指令执行阶段的控制信号，因此，在执行阶段的开始，取指令阶段已经结束，此时，指令的第二个字（Imm16）已经从存储器中取出并被存放在 MDR 中。`,
            p`（1）指令功能为 R[R1]←R[R1]+Imm16 时，执行阶段不需要访存操作，因此，可用以下 3 个时钟周期完成。`,
            p`MDRout，Yin`,
            p`R1out，add，Zin`,
            p`Zout，R1in`,
            p`（2）指令功能为 R[R1]←R[R1]+M[Imm16]时，执行阶段需要一次访存操作，因此，至少需要以下 5 个时钟周期。其中 R1out和 Yin这两个控制信号可以与 Read1 控制信息同时送出，并在 Read2 操作阶段保持不变，也可以延迟到与 Read2 同时送出。`,
            p`MDRout，MARin`,
            p`Read1，（R1out，Yin）`,
            p`Read2，R1out，Yin`,
            p`MDRout，add，Zin`,
            p`Zout，R1in`,
            p`（3）指令功能为 R[R1]←R[R1]+M[M[Imm16]]时，执行阶段需要两次访存操作，因此，至少需要以下 8 个时钟周期。对 R1out 和 Yin 这两个控制信号的处理同（2）中一样。`,
            p`MDRout，MARin`,
            p`Read1`,
            p`Read2`,
            p`MDRout，MARin`,
            p`Read1，（R1out，Yin）`,
            p`Read2，R1out，Yin`,
            p`MDRout，add，Zin`,
            p`Zout，R1in`
        )
    ),
    section(
        '4.图 5.3 给出了某 CPU 内部结构的一部分，MAR 和 MDR 直接连到存储器总线（图中省略）。在两个总线之间的所有数据传送都需经过算术逻辑部件 ALU。ALU 的部分功能及其控制信号如下。'
    )(
        img(pic5_6_3)('图 5.3　题 4 用图'),
        p`MOVa：F=A；　MOVb：F=B；`,
        p`a+1：F=A+1；　b+1：F=B+1`,
        p`a-1：F=A-1；　b-1：F=B-1`,
        p`其中，A 和 B 是 ALU 的输入，F 是 ALU 的输出。假定调用指令 CALL 占两个字，第一个字是操作码，第二个字给出过程（或子程序）的起始地址，返回地址保存在主存的栈中，用 SP（栈顶指针寄存器）指向栈顶处的空元素，栈从高地址向低地址方向增长（自顶向下），按字编址，每次按同步方式从主存读取一个字。请写出读取并执行 CALL 指令所要求的控制信号序列，并说明至少需要多少个时钟周期。（提示：当前指令地址在 PC 中）`,
        section('分析解答')(
            p`因为采用同步方式读写内存，所以在 read 和 write 信号后不需加等待信号 WMFC。CALL 指令有两个字，按字编址，每次从主存读取一个字，因此，CALL 指令需要读两次主存，一次是读取指令中的操作码，另一次是读取指令中给出的子程序首地址。其指令周期分为以下三个阶段。`,
            p`（1）读取指令操作码：将 PC 的内容作为地址访问存储器，取出指令的操作码，送指令寄存器 IR，同时 PC+1 送 PC，以指向指令的第二个字，至少需要 3 个时钟周期（节拍）。`,
            p`PCout，MOVb，MARin`,
            p`Read，b+1，PCin`,
            p`MDRout，MOVb，IRin`,
            p`（2）取子程序首地址：将 PC 的内容作为地址，取出指令的第二个字（即子程序入口地址）送 PC，以使下一个指令周期从子程序的第一条指令开始执行。同时，计算 PC+1 以得到返回地址，送 Y 寄存器，至少需要 3 个时钟周期。`,
            p`PCout，MOVb，MARin`,
            p`Read，b+1，Yin`,
            p`MDRout，MOVb，PCin`,
            p`（3）保存返回地址至栈中：将临时保存在 Y 寄存器的返回地址送到栈顶保存，并自动调整栈顶指针，因为是「自顶向下」栈，因此栈顶指针需要进行「-1」操作。这个过程至少需要 3 个时钟周期。`,
            p`SPout，MOVb，MARin`,
            p`Yout，MOVb，MDRin`,
            p`Write，SPout，b-1，SPin`,
            p`显然，上述每个节拍中执行的操作所需要时间不等，其中，存储访问（read/write）时间最长，时钟周期以最长的存储访问时间为准，CALL 指令的指令周期至少有 9 个时钟周期（节拍）。`,
            p`如果将第一次 PC+1 的结果送到 Y 寄存器，第二阶段以 Y 的内容作为地址访问主存，并继续对 Y 寄存器加 1，结果送 PC，则也能实现 CALL 指令的功能。这种方式下，也是 9 个时钟周期。`
        )
    ),
    section(
        '5.某计算机字长 16 位，标志寄存器 FLAGS 中的 ZF、SF 和 OF 分别是零标志、符号标志和溢出标志，采用双字节定长指令字。假定 bgt（大于零转移）指令的第一个字节指明操作码和寻址方式，第二个字节为偏移地址 Imm8，用补码表示。指令功能是：'
    )(
        p`若（ZF+（SF⊕OF）=0），则 PC=PC+2+Imm8×2；否则，PC=PC+2`,
        p`请回答下列问题或完成相应任务。`,
        p`（1）该计算机的编址单位是多少？`,
        p`（2）bgt 指令执行的是带符号整数比较，还是无符号整数比较？偏移地址 Imm8 的含义是什么？转移目标地址的范围是什么？`,
        p`（3）画出实现 bgt 指令的数据通路。`,
        section('分析解答')(
            p`（1）因为 PC 的增量是 2，且每条指令占 2 个字节，所以编址单位是字节。`,
            p`（2）根据「大于」条件判断表达式，可以看出该 bgt 指令实现的是带符号整数比较。因为无符号数比较时，其判断表达式中没有溢出标志 OF。偏移地址 Imm8 为补码表示，说明转移目标指令可能在 bgt 指令之前，也可能在 bgt 指令之后。计算转移目标地址时，偏移量为 Imm8×2，说明 Imm8 不是相对地址，而是相对指令条数。Imm8 的范围为-128～127，故转移目标地址的范围是 PC+2+（-128×2）～PC+2+127×2，也即转移目标地址的范围是相对于 bgt 指令的前 254 个单元到后 256 个单元之间，如果用指令条数来衡量，就是相对于 bgt 指令的前 127 条指令到后 128 条指令之间。`,
            p`（3）实现 bgt 指令的数据通路如图 5.4 所示。`,
            img(pic5_6_4)('图 5.4　bgt 指令的数据通路')
        )
    ),
    section('6.假定某计算机工程师想设计一个新 CPU，其中运行的一个典型程序的核心模块需要执行一百万条指令，每条指令执行时间为 100ps。')(
        p`（1）在非流水线处理器上执行该程序大约需要花多长时间？`,
        p`（2）若新 CPU 是一个 20 级流水线处理器，执行上述同样的程序，理想情况下，它比非流水线处理器快多少？`,
        p`（3）实际流水线并不是理想的，流水段之间的数据传送会有额外开销。这些开销是否会影响指令执行时间（instruction latency）和指令吞吐率（instruction throughput）？`,
        section('分析解答')(
            p`（1）非流水线处理器上执行该程序的时间大约为 100ps×106=100μs。`,
            p`（2）若在一个 20 级流水线的处理器上执行，忽略流水段之间的寄存器延时，理想情况下，每个时钟周期为 100ps/20=5ps，所以，程序执行时间大约为 5ps×106=5μs，因此，大约快 100/5=20 倍。`,
            p`（3）流水段之间数据的传递产生的额外开销，使得一条指令的执行时间被延长，即影响了指令执行时间；同时也延长了每个流水段的时间，即影响了指令吞吐率。`
        )
    ),
    section(
        '7.某计算机指令流水线由 6 个功能段组成，依次为 A～F，每个功能段的组合逻辑延迟分别为 80ps、30ps、60ps、50ps、60ps、20ps，最后一个功能段需要写寄存器，寄存器延时为 20ps。在这些组合逻辑块之间插入必要的流水段寄存器就可实现相应的指令流水线。理想情况下，以下各种方式所得到的时钟周期、指令吞吐率和指令执行时间各是多少？应该在哪里插入流水段寄存器（假定插入的流水段寄存器的延时也为 20ps）？根据对以下 4 种情况的分析，你能得到什么结论？'
    )(
        p`（1）插入一个流水段寄存器，得到一个两级流水线。`,
        p`（2）插入两个流水段寄存器，得到一个三级流水线。`,
        p`（3）插入三个流水段寄存器，得到一个四级流水线。`,
        p`（4）吞吐量最大的流水线。`,
        section('分析解答')(
            p`（1）两级流水线的平衡点在 C 和 D 之间，其前面一个流水段的组合逻辑延时为 80ps+30ps+60ps=170ps，后面一个流水段的组合逻辑延时为 50ps+60ps+20ps=130ps。最长功能段延时为 170ps，加上流水段寄存器延时 20ps，因而时钟周期为 190ps，理想情况下，指令吞吐率为每秒执行 1/190ps=5.26G 条指令。每条指令在流水线中的执行时间为 2×190ps=380ps。`,
            p`（2）两个流水段寄存器分别插入 B 和 C、D 和 E 之间，这样第一个流水段的组合逻辑延时为 80ps+30ps=110ps，中间第二段的延时为 60ps+50ps=110ps，最后一个段延时为 60ps+20ps=80ps。这样，每个流水段所用时间都按最长延时调整为 110ps+20ps=130ps，故时钟周期为 130ps，指令吞吐率为每秒执行 1/130ps=7.69G 条指令，每条指令在流水线中的执行时间为 3×130ps=390ps。`,
            p`（3）三个流水段寄存器分别插在 A 和 B、C 和 D、D 和 E 之间，这样第一个流水段的组合逻辑延时为 80ps，第二段延时为 30ps+60ps=90ps，第三段延时为 50ps，最后一段延时为 60ps+20ps=80ps。这样，每个流水段都以最长延时调整为 90ps+20ps=110ps，故时钟周期为 110ps，指令吞吐率为每秒执行 1/110ps=9.09G 条指令，每条指令在流水线中的执行时间为 4×110ps=440ps。`,
            p`（4）因为各功能部件对应的组合逻辑中最长延时为 80ps，所以，流水线的时钟周期肯定比 80ps+20ps=100ps 长。为了达到最大吞吐率，时钟周期应该尽量短，因此，最合理的划分方案应该按照每个时钟周期为 100ps 来进行。根据每个功能部件所用时间可知，流水线至少按 5 段来划分，分别把流水线寄存器插入 A 和 B、B 和 C、C 和 D、D 和 E 之间，这样各段的组合逻辑延时为 80ps、30ps、60ps，50ps 和 80ps。其中，最后一个延时 80ps 是 E 和 F 两个阶段的时间相加而得到的。这样时钟周期为 100ps，指令吞吐率为每秒执行 1/100ps=10G 条指令，每个指令的执行时间为 5×100=500ps。`,
            p`通过对上述 4 种情况进行分析，可以得出以下结论：划分的流水段多，时钟周期就变短，指令执行吞吐率就变高，而相应的额外开销（即插入的流水段寄存器的延时）也变大，使得一条指令的执行时间变长。`
        )
    ),
    section(
        '8.假定在 MIPS 典型的 5 级流水线处理器中，各主要功能部件的操作时间如下：存储器——200ps；ALU 和加法器——150ps；寄存器堆读口和写口——50ps。请回答下列问题：'
    )(
        p`（1）若执行阶段 EX 所用的 ALU 操作时间缩短 20%，则能否加快流水线执行速度？如果能，能加快多少？如果不能，请给出理由。`,
        p`（2）若 ALU 操作时间延长 20%，对流水线的性能有何影响？`,
        p`（3）若 ALU 操作时间延长 40%，对流水线的性能又有何影响？`,
        section('分析解答')(
            p`（1）ALU 操作时间缩短 20% 不能加快流水线指令速度。因为指令流水线的执行速度取决于最慢的功能部件所用时间，最慢的是存储器，只有缩短了存储器的操作时间，才可能加快流水线速度。`,
            p`（2）ALU 操作时间延长 20% 时，其操作时间变为 180ps，比存储器所用时间 200ps 还小，因此，对流水线性能没有影响。`,
            p`（3）ALU 操作时间延长 40% 时，其操作时间变为 210ps，比存储器所用时间 200ps 大，因此，在不考虑流水段寄存器延时的情况下，流水线的时钟周期从 200ps 变为 210ps，流水线执行速度降低了（210-200）/200=5%。`
        )
    ),
    section(
        '9.以下 MIPS 指令序列中，哪些指令对之间发生数据相关？假定采用「取指、译码/取数、执行、访存、写回」五段流水线方式，如果不采用「转发」技术，那么需要在发生数据相关的指令前加入几条 nop 指令才能使这段程序避免数据冒险？如果采用「转发」，是否可以完全解决数据冒险？（注：以下指令序列中的 t1～t2、s0～s3 都是 MIPS 寄存器名）'
    )(

        precode(`addu      $s2, $s1, $s0          // R[$s2]←R[$s1]+R[$s0]
addu      $t2, $s2, $s2          // R[$t2]←R[$s2]+R[$s2]
lw        $t1, 0($t2)            // R[$t1]←M[R[$t2]+0]
add       $s3, $t1, $t2          // R[$s3]←R[$t1]+R[$t2]`)(),

        section('分析解答')(
            p`发生数据相关的有：第 1 和第 2 条指令之间关于 $s2、第 2 和第 3 条指令之间关于 $t2、第 2 和第 4 条指令之间关于 $t2、第 3 和第 4 条指令之间关于 $t1。`
        )
    )
).elem
