import { p, section } from '@src/components/@write'
const title = '4.3　基本术语解释'
const page = section(title)(
    section('目标文件（object file）')(p`编译器或汇编器处理源代码后生成机器语言目标代码，存放目标代码的文件即为目标文件。`),
    section('链接器（linker）')(
        p`一个大的程序往往会分成多个源程序文件来编写，因而需要对各个不同源程序文件分别进行编译或汇编，以生成多个不同的目标代码文件，这些目标代码文件中包含指令、数据和其他说明信息。此外，在程序中还会调用一些标准库函数。为了生成一个可执行文件，需要将所有关联到的目标代码文件，包括用到的标准库函数目标文件，按照某种形式组合在一起，形成一个具有统一地址空间的、可被加载到存储器直接执行的程序。这种将一个程序的所有关联模块对应的目标代码文件结合在一起，以形成一个可执行文件的过程称为链接。在早期计算机系统中，链接是手动完成的，现在则由专门的链接程序（linker，也称为链接器）来实现。`
    ),
    section('可重定位目标文件（relocatable object file）')(
        p`经编译程序和汇编程序对源程序进行翻译处理所得到的机器语言程序称为目标程序文件，是由机器指令组成的二进制代码，如 UNIX 系统中的*.o 文件、MS-Windows 系统中的*.obj 文件等。一般而言，目标程序文件中包含目标文件头、文本段（机器代码）、数据段、重定位信息、符号表、调试信息等。因为目标程序文件是可重定位的，所以也称为可重定位目标文件。`
    ),
    section('可执行目标文件（executable object file）')(
        p`可执行目标文件是通过装入程序能被直接装入存储器执行的二进制代码文件，通常与可重定位目标文件有相同的格式。可执行目标文件中的模块可以调用其他动态链接库中的函数。可执行目标文件有时简称为可执行文件。`
    ),
    section('符号解析（symbol resolution）')(
        p`程序中有被定义和被引用的符号，这些符号包括变量名和函数名。符号解析的目的是将每个符号的引用与一个确定的符号定义建立关联。`
    ),
    section('重定位（relocation）')(
        p`重定位的目的是分别合并代码和数据，并根据代码和数据在虚拟地址空间中的位置，确定每个符号的最终存储地址，然后根据符号的确切地址来修改符号的引用处的地址。这种重新确定合并后的代码和数据的地址并更新指令中被引用符号地址的工作称为重定位（relocation）。`
    ),
    section('ELF 目标文件格式（ELF object file format）')(
        p`ELF 是如 Linux、BSD UNIX 等现代 UNIX 操作系统中所使用的一种目标文件格式，称为可执行可链接格式（Executable and Linkable Format，简称 ELF），因此，ELF 目标文件既可用于程序的链接，也可用于程序的执行，前者使用链接视图格式，后者使用执行视图格式。`
    ),
    section('ELF 可重定位目标文件（ELF relocatable object file）')(
        p`ELF 可重定位目标文件由 ELF 头、节头表以及夹在 ELF 头和节头表之间的各个不同的节组成。`
    ),
    section('ELF 头（ELF header）')(
        p`ELF 头定义了 ELF 魔数、版本、小端/大端、操作系统平台、目标文件的类型、机器结构类型、程序执行的入口地址、程序头表（段头表）的起始位置和长度、节头表的起始位置和长度等说明信息。ELF 头总是位于文件的最开始位置，其他部分的位置由 ELF 头和节头表指出，不需要具有固定的顺序。`
    ),
    section('节头表（section header table）')(
        p`除 ELF 头之外，节头表是 ELF 可重定位目标文件中最重要的部分内容之一，其中给出了每个节的节名、在文件中的偏移、大小、访问属性、对齐方式等。`
    ),
    section('节（section）')(
        p`节是 ELF 文件中的主体信息，包含了链接过程所用的目标代码信息，包括指令、数据、符号表和重定位信息等。一个典型的 ELF 可重定位目标文件中包含的常用节有：.text（代码）、.rodata（只读数据）、.data（可读可写数据）、.bss（未初始化数据）、.symtab（符号表）、.rel.text（.text 节可重定位信息）、.rel.data（.data 节可重定位信息）、.debug（调试信息）、.strtab（字符串表）等。`
    ),
    section('段头表（segment header table）')(
        p`段头表也称程序头表，用于描述可执行文件中的节与虚拟空间中的存储段之间的映射关系，它是一个结构数组。因为可执行目标文件中所有代码的位置连续、所有只读数据的位置连续、所有可读可写数据的位置连续，所以这些连续的片段（chunk）被映射到存储空间（实际上就是虚拟地址空间）中的一个存储段，程序头表用于描述这种映射关系，一个表项说明一个连续的片段或一个特殊的节。由 ELF 头中的字段 e_phentsize 和 e_phnum 分别指定程序头表的表项大小和表项数。`
    ),
    section('只读代码段（read-only code segment）')(
        p`只读代码段是虚拟地址空间中一个连续段，对应可执行目标文件中所有代码和只读数据所在区域，通常包括 ELF 头、程序头表以及.init、.text 和.rodata 节。`
    ),
    section('可读可写数据段（read/write data segment）')(
        p`可读可写数据段是虚拟地址空间中一个连续段，对应可执行目标文件中所有可读可写数据所在的区域，通常包括.data 和.bss 节。`
    ),
    section('运行时堆（runtime heap）')(
        p`运行时堆是虚拟地址空间中用户空间内的一个存储区域，程序运行时通过调用相应的存储空间分配库函数（如 malloc）等动态分配堆内的存储空间。`
    ),
    section('用户栈（user stack）')(
        p`用户栈是在虚拟地址空间中用户空间内的一个存储区域，程序运行时通过执行相应的指令动态生成栈内的存储信息，例如，对于 C 语言程序，每进行一次函数（过程）调用，就会在栈区生长出一个新的栈帧，在基于 IA-32 的系统中，用户栈从用户空间的最大地址往低地址方向增长，栈区以上的高地址区是操作系统内核的虚拟存储区。`
    ),
    section('全局符号（global symbol）')(
        p`在模块 m 中定义并被其他模块引用的符号称为全局符号。这类符号包括非静态的函数名和被定义为不带 static 属性的全局变量名。每个全局符号或者是强符号或者是弱符号，汇编器把全局符号的强/弱特性隐含地编码在可重定位目标文件的符号表中，以供链接时符号解析所用。`
    ),
    section('外部符号（external symbol）')(
        p`由其他模块定义并在模块 m 中引用的符号称为外部符号。这类符号包括在其他模块定义的外部函数名和外部变量名。`
    ),
    section('本地符号（local symbol）')(
        p`在模块 m 中定义并在 m 中引用的符号称为本地符号。这类符号包括带 static 属性的函数名和全局变量名。这类在一个过程（函数）内部定义的带 static 属性的本地变量不在栈中管理，而是被分配在静态数据区，即编译器为它们在.data 或.bss 节中分配空间。如果在模块 m 内有两个函数使用了同名 static 本地变量，则需要为这两个变量都分配空间，并作为两个不同的符号记录到符号表中。`
    ),
    section('强符号（strong symbol）')(p`函数名和已初始化的全局变量名是强符号。`),
    section('弱符号（weak symbol）')(p`未初始化的全局变量名是弱符号。`),
    section('共享目标文件（shared object file）')(
        p`共享目标文件也称为共享库文件，它是一种特殊的可重定位目标文件，其中记录了相应的代码、数据、重定位和符号表信息，能在可执行目标文件装入或运行时被动态地装入内存并自动被链接。`
    ),
    section('动态链接（dynamic link）')(p`在可执行目标文件装入或运行时，将共享库目标文件动态装入内存并自动与可执行目标文件链接的过程称为动态链接。`),
    section('动态链接器（dynamic linker）')(
        p`动态链接由一个称为动态链接器（dynamic linker）的程序来完成。UNIX 系统中的共享库文件采用.so 扩展名，Windows 系统中称其为动态链接库（Dynamic Link Libraries，简称 DLLs），采用.dll 扩展名。`
    ),
    section('装入程序（loader）')(
        p`装入程序也称为加载器或加载程序，是用于将可执行目标文件装入系统并启动执行的软件模块。一般来说，可执行文件的装入是由操作系统内核来实现的，因此装入程序属于操作系统的一部分。`
    )
).elem
