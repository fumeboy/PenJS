import { p, b, section, ol } from '@src/components/@write'
const title = '4.1　教学目标和内容安排'
const page = section(title)(
    p`${b`主要教学目标`}使学生了解静态链接的概念、目标文件格式、符号及符号表、符号解析、使用静态库链接、重定位信息及重定位过程、可执行文件的存储器映像、可执行文件的加载和共享库动态链接等，在此基础上帮助学生养成良好的程序设计习惯，增强程序调试能力，并使其能够深入理解进程的虚拟地址空间概念。`,
    p`${b`基本学习要求`}`,
    ol(
        p`了解编译和汇编的区别。`,
        p`了解链接的基本概念和链接过程所要完成的任务。`,
        p`理解目标代码和目标代码文件的基本概念。`,
        p`了解 ELF 目标文件的基本构成形式。`,
        p`了解 ELF 目标文件链接视图和执行视图的差别。`,
        p`了解 ELF 可重定位目标文件的格式以及主要组成部分。`,
        p`了解 ELF 可执行目标文件的格式以及主要组成部分。`,
        p`了解 ELF 可重定位目标文件和可执行目标文件的差别。`,
        p`理解符号表中包含的全局符号、外部符号和本地符号的定义。`,
        p`理解符号解析的目的和功能以及进行符号解析的过程。`,
        p`理解全局符号的强弱性以及如何处理多重符号定义。`,
        p`能够运用多重符号定义规则对程序执行结果进行分析。`,
        p`了解静态库的概念和静态链接时的符号解析过程。`,
        p`理解重定位的目的和功能以及进行重定位的过程。`,
        p`了解重定位信息在可重定位目标文件中存放在哪些节中。`,
        p`了解 IA-32 处理器相关的两种基本重定位信息类型。`,
        p`理解 IA-32 处理器相关的两种基本重定位方式的执行过程。`,
        p`了解可执行目标文件的加载过程。`,
        p`了解动态链接的概念和基本特性。`,
        p`了解程序加载时的动态链接过程。`,
        p`了解程序运行时的动态链接过程。`
    ),
    p`链接器位于编译器、指令集体系结构和操作系统的交叉点上，涉及指令系统、代码生成、机器语言、程序转换和虚拟存储管理等诸多概念，因而它对于理解整个计算机系统概念来说是非常重要的。`,
    p`本章的内容在传统的计算机专业教学体系中没有一门课程会涉及，但是由于链接器在整个计算机系统中处于多个核心内容的交叉点上，因此学生对这部分内容的深入理解是非常有必要的，对于养成良好的程序设计习惯、增强程序调试能力、深入理解进程的虚拟地址空间概念等都有非常重要的作用。`,
    p`本章的教学可以结合实验进行，关于 ELF 头、各个节以及节头表、程序头表（段头表）以及各种节组成的段等细节内容，只要求学生能够理解即可，不需要死记硬背。`
).elem
