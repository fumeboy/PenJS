import { b, ol, p, section } from '@src/components/@write'
const title = '2.2　主要内容提要'
const page = section(title)(
    section('1.数据的表示')(
        p`计算机中的数据主要有数值数据与非数值数据两类。`,
        p`数值数据是指在数轴上有对应的点、能比较大小的数，在计算机中有二进制数和十进制数两种表示形式。二进制表示有无符号整数、带符号整数和浮点数三类。无符号整数也称为无符号数，用来表示指针、地址等正整数；带符号整数一般用补码表示；浮点数用来表示实数，现代计算机中多采用 IEEE 754 标准。十进制表示的主要是整数，需要用二进制对其进行编码，因此也称为 BCD（Binary Coded Decimal）码，最常用的 BCD 码是 8421 码。`,
        p`非数值数据是指在数轴上没有对应的点的数据，主要包括逻辑值、西文字符和汉字字符等。逻辑值只有两个状态取值，按位进行运算；西文字符多采用 7 位 ASCII 码表示；汉字字符有输入码、内码和字模码，汉字内码大多占 2～4 个字节。`
    ),
    section('2.数据的宽度')(p`通常以字节（Byte）为基本单位表示，数据长度单位（如 MB、GB、TB 等）在表示数据容量和带宽等不同对象时所代表的大小不同。`),
    section('3.数据的排列')(
        p`数据的排列有大端和小端两种排列方式。大端方式以 MSB 所在地址为数据的地址，即给定地址处存放的是数据最高有效字节；小端方式以 LSB 所在地址为数据的地址，即给定地址处存放的是数据最低有效字节。`
    ),
    section('4.位运算和整数运算')(
        p`除基本的与、或、非等逻辑运算外，主要的位运算包括以下几种。`,
        p`① 移位运算：包括逻辑移位、算术移位和循环移位。逻辑移位对无符号数进行，移位时，在空出的位补 0，左移时可根据移出位是否为 1 来判断溢出。算术移位对带符号整数进行，移位前后符号位保持不变，否则溢出。循环移位时不需要考虑溢出，左移一位，数值扩大一倍，相当于乘 2 操作；右移一位，数值缩小一半，相当于除 2 操作。`,
        p`② 扩展运算：包括零扩展和符号扩展。零扩展对无符号数进行，高位补 0；符号扩展对带符号整数进行，因为用补码表示，所以在高位直接补符号。`,
        p`整数运算包括整数加减运算、乘运算和除运算。`,
        p`① 整数加减运算：计算机中带符号整数用补码表示，因此，带符号整数加减运算在补码加减运算器中执行，无符号整数可以看作正的带符号整数，因而无符号整数加减运算也在补码加减运算器中完成。也就是说，带符号整数的加减运算和无符号整数的加减运算是在同一个运算电路中实现的。整数加减运算器基于基本的无符号加法器实现（A+B），只要在加数 B 的输入端加上取反电路，并使控制端 Sub=1，就可实现 A-B 的功能，再加上各个标志生成电路，即可得到各个标志信息。`,
        p`② 整数乘运算：对于带符号整数乘和无符号整数乘，若两个乘数分别具有相同的 0/1 序列，则其乘积的高 n 位不同而低 n 位相同，因此在计算机中通常具有带符号整数乘法器和无符号整数乘法器两种不同的运算电路。可通过乘积的高 n 位是否为全 0 来判断无符号整数的 n 位乘积是否溢出，通过乘积的高 n+1 位是非为全 0 或全 1 来判断带符号整数的 n 位乘积是否溢出。`,
        p`③ 整数除运算：计算机中的除运算也是通过专门的带符号整数除法器和无符号整数除法器分别实现的。在进行除运算之前，可通过被除数和除数的某些特征直接判断其结果是否溢出，只有在结果不发生溢出或除数为 0 的情况下，才会继续在相应的除法器中继续进行除运算。`
    ),
    section('5.浮点数运算')(
        p`计算机中大多用 IEEE 754 标准表示浮点数，因此，浮点数运算（简称为浮点运算）主要针对 IEEE 754 标准浮点数。浮点运算由专门的浮点运算器实现，因为一个浮点数由一个定点小数和一个定点整数组成，所以浮点运算器由定点运算部件构成。浮点运算包括浮点加减运算和浮点乘除运算。`,
        p`① 浮点加减运算：按照对阶、尾数加减、规格化、舍入和溢出判断等步骤完成。对阶时，小阶向大阶看齐，阶小的那个数的尾数右移，直到两数阶码相同，右移时一般保留两位或三位附加位。尾数加减时用原码加减运算实现。规格化处理时根据结果的尾数形式的不同确定进行左规或右规操作。舍入操作有就近舍入、正向舍入、负向舍入和截去四种方式，默认的是就近舍入到偶数方式。溢出判断主要根据结果的阶码进行判断，当发生阶码上溢时，运算结果发生溢出；当发生阶码下溢时，运算结果近似为 0。`,
        p`② 浮点乘除运算：尾数用原码小数的乘/除运算实现，阶码用移码加减运算实现，需要对结果进行规格化、舍入和溢出判断。`
    )
).elem
