import { b, ol, p, section } from '@src/components/@write'
const title = '2.1　教学目标和内容安排'
const page = section(title)(
    p`${b`主要教学目标`}使学生掌握计算机内部各种数据的机器级表示以及相应的各种运算方法，并能将这些知识熟练运用到高级语言和机器级语言的编程和调试工作中。`,
    p`${b`基本学习要求`}`,
    ol(
        p`了解真值和机器数的含义。`,
        p`了解无符号整数的含义、用途和表示。`,
        p`了解带符号整数的表示方法。`,
        p`理解为什么现代计算机都用补码表示带符号整数。`,
        p`掌握在真值和各种编码表示数之间进行转换的方法。`,
        p`能够运用整数表示知识解释和解决高级编程中整数表示和转换问题。`,
        p`了解浮点数表示格式，以及其与表示精度和表示范围之间的关系。`,
        p`掌握规格化浮点数的概念和浮点数规格化方法。`,
        p`掌握 IEEE 754 标准，并能在真值与单精度格式浮点数之间进行转换。`,
        p`能运用数据表示知识解释和解决高级语言编程中浮点数表示和转换问题。`,
        p`掌握常用的十进制数的二进制编码方法，如 8421 码。`,
        p`了解逻辑数据、西文字符和汉字字符的常用表示方法，如 ASCII 码、GB 2312—1980。`,
        p`了解常用数据长度单位的含义，如 bit、Byte、KB、MB、GB、TB 等。`,
        p`了解大端和小端排列方式，以及数据的对齐存储方式。`,
        p`了解高级程序设计语言和低级程序设计语言中涉及的各种运算。`,
        p`掌握定点数的逻辑移位、算术移位和扩展操作方法。`,
        p`掌握整数加减运算方法以及运算部件的结构，并能利用机器内部的整数运算知识解释高级语言编程中相应的计算结果。`,
        p`理解为何在运算中会发生溢出，并掌握判断整数加减运算溢出的方法。`,
        p`理解机器内部整数乘运算的基本方法以及带符号整数乘和无符号整数乘的乘积之间的关系。`,
        p`理解为什么整数乘运算会发生溢出，并能够说明在高级语言和机器级代码两个不同的层面如何进行溢出判断。`,
        p`理解整数除运算在什么情况下发生溢出以及为何在其他情况下不会发生溢出。`,
        p`理解在一个变量与一个常量相乘时如何将乘运算转换为加减和移位运算。`,
        p`理解一个变量除以一个 2 的幂次形式的整数时如何用加减和移位运算实现。`,
        p`掌握浮点数加减运算过程和方法。`,
        p`理解 IEEE 754 标准对附加位的添加以及舍入模式等方面的规定。`,
        p`了解浮点数乘法和除法运算的基本思想。`
    ),
    p`本章内容相对比较容易，学生也比较熟悉。对于信息的二进制表示、进位计数制等简单内容，完全可以让学生自学。如果课时不充裕，对于十进制数的表示和汉字字符编码部分，也可以只简单介绍其概要内容，细节部分留给学生课后阅读。关于高级语言中的各种数据类型与机器级数据表示之间的关系，应该要求学生掌握，这对于提高学生程序设计和调试能力可起到很大的作用。其实，这部分内容很简单，只要在教学过程中提醒学生关注并进行一些编程练习就能达到目的，而且程序设计课程中大多也会介绍这部分内容。`,
    p`对于本章内容，教学过程中普遍存在的问题是，学生缺乏将机器级数据表示和程序设计及程序调试工作相互关联的意识。许多学生也许对机器级数据表示的基本原理和概念很了解，但在程序设计和调试工作中，往往不会运用所学知识解决实际问题，不会把高级语言中的类型定义、数值范围、数据类型转换等问题和本课程所学的知识联系起来，因而，所学知识没有起到真正的作用。`,
    p`为了增强学生对机器级数据表示的认识，可以让学生亲自编写相关的程序，通过程序的执行结果来理解本章所学的知识。与本章内容相关的编程练习有很多，例如，验证一些关系表达式的结果；确定 float 型变量和 double 型变量的精度；检查一些特殊表达式的运行结果，如一个非零整数除以 0、一个非零实数除以 0、0 除以 0、负数开平方等；检查机器是大端还是小端方式数据；检查数据是对齐存放还是不对齐存放。`
).elem
