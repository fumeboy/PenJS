import { section, p, img } from '@src/components/@write'
import pic1_6_1 from './1-6-1.jpg'
import pic1_6_2 from './1-6-2.jpg'
import pic1_6_3 from './1-6-3.jpg'
const title='1.6　分析应用题'
const page = section(title)(
    section('1.请说明以下措施对缩短程序的响应时间和提高系统的吞吐率各有什么影响？')(
        p`（1）使用更快的处理器。`,
        p`（2）增加处理器个数，使得不同的处理器同时执行不同的作业。`,
        p`（3）优化编译生成的代码，使得程序执行的总时钟周期数减少。`,
        p`（4）在 CPU 和主存之间增加 cache，减少访问指令和数据的时间。`,
        section('分析解答')(
            p`措施（1）：因为总执行时间 = 总时钟周期数 × 时钟周期。更快的处理器意味着时钟频率加快了，即每个时钟周期更短了，故总执行时间变短了。因此采用更快的处理器可缩短程序响应时间，从而使单位时间内完成的作业数增加，系统的吞吐率也提高了。`,
            p`措施（2）：处理器个数的增加，使得同时可以有多个作业在不同的处理器上进行处理，因而，系统在单位时间内可以完成更多的作业，吞吐率会明显提高。但每个作业的处理过程还是一样的，所以程序的执行时间并不会缩短。但是，因为吞吐率提高了，所以作业在等待队列中的排队时间减少了，因而响应时间会在一定程度上有相应的改善。`,
            p`措施（3）：优化编译生成的代码使总的执行时钟周期数减少，也就缩短了程序的执行时间，因而使得单位时间内完成的作业数增加，提高了系统的吞吐率。`,
            p`措施（4）：在 CPU 和主存之间增加 cache，使得程序访问存储器的时间大大缩短，因而可以缩短程序的响应时间，从而也就使得单位时间内完成的作业数增加，提高了系统的吞吐率。`,
            p`综上所述，措施（1）、（3）和（4）是因为首先缩短了程序的执行时间而使得系统的吞吐率提高；而措施（2）是因为提高了系统的吞吐率，使得程序等待时间缩短而缩短了程序响应时间。程序响应时间和系统的吞吐率之间通常是相辅相成的关系，但在某些特定情况下，它们有可能是对立关系。`
        )
    ),
    section(
        '2.假定某程序 P 由一个 100 条指令构成的循环组成，该循环共执行 50 次，在某系统 S 中执行程序 P 花了 20000 个时钟周期，则系统 S 在执行程序 P 时的 CPI 是多少？'
    )(
        section('分析解答')(
            p`程序 P 中 100 条指令的循环被执行了 50 次，所以在 20000 个时钟周期中共执行了 5000 条指令，所以，系统 S 在执行程序 P 时的 CPI=20000/5000=4。`
        )
    ),
    section(
        '3.假定执行某种指令 I 需要 20 个时钟周期，该指令在程序中的出现频度为 10%，其他所有指令的平均 CPI 为 5，则 CPU 执行指令 I 所用时间占整个 CPU 时间的百分比是多少？如果通过对硬件进行改进，能使指令 I 的执行时间缩短为 10 个时钟周期，但同时会使 CPU 时钟周期延长 10%，你认为是否应该采取这种改进措施？'
    )(
        section('分析解答')(
            p`假定 CPU 执行的所有指令条数为 N，时钟周期为 T，则 CPU 执行总时间为（20×10%+5×90%）×N×T，其中指令 I 所用时间为 20×10%×N×T，因此，CPU 执行指令 I 所用时间占整个 CPU 时间的百分比是（20×10%×N×T）/[（20×10%+5×90%）×N×T]=30.77%。如果改进后将指令 I 的执行时间缩短为 10 个时钟周期，时钟周期的长度延长 10%，则改进后 CPU 执行的总时间为（10×10%+5×90%）×N×1.1×T=6.05×N×T，改进前的总时间为（20×10%+5×90%）×N×T=6.5×N×T，因而，改进后的性能是改进前的 6.5/6.05=1.07 倍。由此可见，对硬件的这种改进措施能够提高 CPU 的性能。`
        )
    ),
    section(
        '4.若有两个基准测试程序 P1 和 P2 在机器 M1 和 M2 上运行，假定 M1 和 M2 的价格分别是 5000 元和 8000 元，表 1.3 给出了 P1 和 P2 在 M1 和 M2 上所用的时间和指令条数。'
    )(
        p`表 1.3　P1 和 P2 在 M1 和 M2 上所用的时间和指令条数`,
        p`请回答下列问题。`,
        p`（1）对于 P1，哪台机器的速度快？快多少？对于 P2 呢？`,
        p`（2）在 M1 上执行 P1 和 P2 的速度分别是多少 MIPS？在 M2 上的执行速度又各是多少？从执行速度来看，对于 P2，哪台机器的速度快？快多少？`,
        p`（3）假定 M1 和 M2 的时钟频率各是 800MHz 和 1.2GHz，则在 M1 和 M2 上执行 P1 时的平均时钟周期数 CPI 各是多少？`,
        p`（4）如果某个用户需要大量使用程序 P1，并且该用户主要关心系统的响应时间而不是吞吐率，那么，该用户需要大批购进机器时，应该选择 M1 还是 M2？为什么？（提示：从性价比上考虑）`,
        p`（5）如果另一个用户也需要购进大批机器，但该用户使用 P1 和 P2 一样多，主要关心的也是响应时间，那么应该选择 M1，还是 M2？为什么？`,
        section('分析解答')(
            p`（1）对于程序 P1，M1 所花的执行时间是 M2 的 2 倍，故 M2 比 M1 快 1 倍；对于程序 P2，M2 所花的执行时间是 M1 的 2 倍，故 M1 比 M2 快 1 倍。`,
            p`（2）在 M1 上 P1 的速度为 200M/1s=200MIPS，P2 的速度为 300k/0.003s=100MIPS；在 M2 上 P1 的速度为 150M/0.5s=300MIPS，P2 的速度为 420k/0.006s=70MIPS。从执行速度来看，对于 P2，因为 100MIPS/70MIPS=1.43，所以 M1 比 M2 快 0.43 倍。`,
            p`（3）在 M1 上执行 P1 时的平均时钟周期数 CPI 为 1s×800MHz/200M=4；在 M2 上执行 P1 时的平均时钟周期数 CPI 为 0.5s×1.2GHz/150M=4。`,
            p`（4）考虑运行 P1 时 M1 和 M2 的性价比，因为该用户主要关心系统的响应时间，所以性价比中的性能主要考虑执行时间，其性能为执行时间的倒数。故性价比 R 为 R=1/（执行时间 × 价格）。R 越大说明性价比越高，也即，「执行时间 × 价格」的值越小，则性价比越高。`,
            p`对于程序 P1，M1 的性价比为 R1=1/（1s×5000），M2 的性价比为 R2=1/（0.5s×8000），根据计算，可知 R2>R1，故 M2 的性价比高，应选择购买 M2。`,
            p`（5）因为 P1 和 P2 需要同等考虑，所以需要考虑综合性能。有多种计算综合性能的方法，如执行时间总和、执行时间算术平均值、执行时间几何平均值等。`,
            p`若用执行时间总和，则 M1 的性价比为 R1=1/（1003ms×5000），M2 的性价比为 R2=1/（506ms×8000），显然 R2>R1，故 M2 的性价比高，应选择 M2。`,
            p`若用算术平均值，则 M1、M2 上执行时间的算术平均值分别为 501.5ms 和 253ms。因此，M1 的性价比为 R1=1/（501.5ms×5000），M2 的性价比为 R2=1/（253ms×8000），显然 R2>R1，故 M2 的性价比高，应选择 M2。`,
            p`若用几何平均值，则 M1、M2 上执行时间的几何平均值都一样，约为 54.7。因此，M1 的性价比为 R1=1/（54.7×5000），M2 的性价比为 R2=1/（54.7×8000），显然 R1>R2，故 M1 的性价比高，应选择 M1。`,
            p`由此可见，用不同的综合性能计算方法得到的结论可能不同。`
        )
    ),
    section(
        '5.假定 M1 和 M2 是以不同方式实现同一个指令集的两种机器，M1 的时钟频率为 800MHz，M2 的时钟频率为 400MHz。在该指令集中一共有 A、B 和 C 三类指令。有三种不同的编译器，其中 C1 和 C2 分别是 M1 和 M2 的生产厂商提供的，C3 是第三方编译器。假设对于同一个程序而言，三个编译器生成的程序代码中指令总数相等，但是指令的组合情况各不相同。各类指令在 M1 和 M2 上运行时所需的平均时钟周期数和在三类编译器生成的程序中所占的百分比见表 1.4。'
    )(
        img(pic1_6_1)('表 1-6-1　M1 和 M2 的 CPI 以及三个程序的指令频度'),
        p`请回答下列问题：`,
        p`（1）如果 M1 和 M2 都使用 C1 编译器，则 M1 的生产厂商可以声称其性能是 M2 的多少倍？`,
        p`（2）如果 M1 和 M2 都使用 C2 编译器，则 M2 的生产厂商可以声称其性能是 M1 的多少倍？`,
        p`（3）如果购买了 M1，那么你会选择哪种编译器？如果购买了 M2，那么你又会选择哪种编译器？`,
        p`（4）如果其他所有指标（包括价格）都相同，你会买哪台机器？`,
        section('分析解答')(
            p`（1）如果 M1 和 M2 都用 C1 编译器，则 M1 上的 CPI 为 2×30%+3×50%+4×20%=2.9，M2 上的 CPI 为 1×30%+2×50%+1.5×20%=1.6；M1 的时钟频率为 800MHz，M2 的时钟频率为 400MHz，所以，M1 上一条指令的平均执行时间为 2.9×1/800MHz=2.9×1.25ns=3.625ns，M2 上一条指令的平均执行时间为 1.6×1/400MHz=1.6×2.5ns=4ns；M1 的性能和 M2 的性能之比约为 4ns/3.625ns=1.1，所以，M1 的生产商可以声称 M1 的性能大约是 M2 的 1.1 倍。`,
            p`（2）如果 M1 和 M2 都用 C2 编译器，则 M1 上的 CPI 为 2×30%+3×20%+4×50%=3.2，M2 上的 CPI 为 1×30%+2×20%+1.5×50%=1.45；M1 的时钟频率为 800MHz，M2 的时钟频率为 400MHz，所以 M1 上一条指令的平均执行时间为 3.2×1/800MHz=3.2×1.25ns=4ns，M2 上一条指令的平均执行时间为 1.45×1/400MHz=1.45×2.5ns=3.625ns；M2 的性能和 M1 的性能之比约为 4ns/3.625ns=1.1，所以，M2 的生产商可以声称 M2 的性能大约是 M1 的 1.1 倍。`,
            p`（3）由上述分析可知：C1 编译器在 M1 上的性能比 M2 好，因此，如果购买了 M1，则编译器应选择 C1；同理，如果购买了 M2，则编译器应选择 C2。`,
            p`（4）从上述（1）和（2）的分析结果来看，用生产商自己的编译器无法衡量 M1 和 M2 的好坏，所以借助第三方提供的编译器 C3 来考察更客观。假定在 M1 和 M2 上都用 C3 编译器，则 M1 上的 CPI 为 2×50%+3×30%+4×20%=2.7，M2 上的 CPI 为 1×50%+2×30%+1.5×20%=1.4；M1 的时钟频率为 800MHz，M2 的时钟频率为 400MHz，所以 M1 上一条指令的平均执行时间为 2.7×1/800MHz=2.7×1.25ns=3.375ns，M2 上一条指令的平均执行时间为 1.4x1/400MHz=1.4×2.5ns=3.5ns；M1 的性能和 M2 的性能之比约为 3.5ns/3.375ns=1.04，用第三方编译器 C3 说明 M1 的性能大约是 M2 的 1.04 倍，因此可选择购买 M1。`
        )
    ),
    section(
        '6.若机器 M1 和 M2 具有相同的指令集，其时钟频率分别为 0.8GHz 和 1.6GHz。在指令集中有 5 种不同类型的指令 A～E。表 1.5 给出了在 M1 和 M2 上每类指令的平均时钟周期数 CPI。'
    )(
        img(pic1_6_2)('表 1-6-2　在 M1 和 M2 上每类指令的平均时钟周期数 CPI'),
        p`请回答下列问题：`,
        p`（1）M1 和 M2 的峰值 MIPS 各是多少？`,
        p`（2）假定某程序 P 的指令序列中，5 类指令具有完全相同的指令条数，则程序 P 在 M1 和 M2 上运行时，哪台机器更快？快多少？在 M1 和 M2 上执行程序 P 时的平均时钟周期数 CPI 各是多少？`,
        section('分析解答')(
            p`（1）计算峰值 MIPS 时应该选择 CPI 最少的指令，故在 M1 上可以选择一段全部由 A 类指令组成的程序，其峰值 MIPS 为 0.8GHz/1=800MIPS；在 M2 上可以选择一段全部由 A 类和 B 类指令组成的程序，其峰值 MIPS 为 1.6GHz/2=800MIPS。`,
            p`（2）对于程序 P，每类指令的条数均占 1/5，故 M1 的 CPI 为 CPI1=（1+2+2+3+4）/5=2.4，M2 的 CPI 为 CPI2=（2+2+4+5+6）/5=3.8。当然，不能根据以上结果说明程序 P 在 M1 上运行更快，因为 M1 和 M2 的时钟频率不同。`,
            p`假设程序 P 的指令条数为 N，则 P 在 M1 上的执行时间为 2.4×N×1/0.8GHz=3.0N（ns）；在 M2 上的执行时间为 3.8×N×1/1.6GHz=2.375N（ns），所以，M2 执行 P 的速度更快，每条指令平均快 0.625ns。`,
            p`从该题可以看出，虽然程序 P 在 M1 中每条指令执行所花的时钟周期数少，但是因为 M2 的时钟频率更快，所以时钟周期更短，使得每条指令的平均执行时间更短。`
        )
    ),
    section(
        '7.假设同一套指令集用不同的方法设计了两种机器 M1 和 M2。机器 M1 的时钟周期为 0.8ns，机器 M2 的时钟周期为 1.2ns。某个程序 P 在机器 M1 上运行时的 CPI 为 4，在 M2 上的 CPI 为 2。对于程序 P 来说，哪台机器的执行速度更快？快多少？'
    )(
        section('分析解答')(
            p`因为 M1 和 M2 实现的是同一套指令集，所以程序 P 在机器 M1 和 M2 上的指令条数相同，假定是 N 条，则 P 在 M1 上的执行时间为 4×0.8ns×N=3.2N（ns）；P 在 M2 上的执行时间为 2×1.2ns×N=2.4N（ns）。由此可知，对于程序 P 来说，M2 的执行速度更快，平均每条指令快 0.8ns。`
        )
    ),
    section(
        '8.假设某机器 M 的时钟频率为 2GHz，用户程序 P 在 M 上的指令条数为 1×109，其 CPI 为 1.5，则 P 在 M 上的执行时间是多少？若在机器 M 上从程序 P 开始启动到执行结束所需的时间是 2s，则程序 P 的用户 CPU 时间占用的百分比是多少？'
    )(
        section('分析解答')(
            p`程序 P 在机器 M 上执行所需时钟周期数为 1×109×1.5=1.5×109，所需时间为 1.5×109/（2×109）=0.75s，程序 P 的用户 CPU 时间在 2s 内占用的百分比是 0.75s/2s×100%=37.5%。`
        )
    ),
    section(
        '9.假定某编译器对某段高级语言程序编译生成两种不同的指令序列 S1 和 S2，在时钟频率为 1GHz 的机器 M 上运行，目标指令序列中用到的指令类型有 A、B、C 和 D 四类。四类指令在 M 上的 CPI 和两个指令序列所用的各类指令条数见表 1.6。'
    )(
        img(pic1_6_3)('表 1-6-3　四类指令在 M 上的 CPI 和两个指令序列所用的各类指令条数'),
        p`请问 S1 和 S2 各有多少条指令？CPI 各为多少？所含的时钟周期数各为多少？执行时间各为多少？`,
        section('分析解答')(
            p`序列 S1 的指令条数为 5+2+2+1=10，CPI 为（5×1+2×2+2×3+1×4）/10=1.9，所含的时钟周期数为 1.9×10=19，故执行时间为 19/（1×109）s=19ns。`,
            p`序列 S2 的指令条数为 1+1+1+5=8，CPI 为（1×1+1×2+1×3+5×4）/8=3.25，所含的时钟周期数为 3.25×8=26，故执行时间为 26/（1×109）s=26ns。`
        )
    ),
    section(
        '10.假定机器 M 的时钟频率为 200MHz，某程序 P 在机器 M 上的执行时间为 12s。对 P 优化时，将其所有乘 4 指令都换成了一条左移两位的指令，得到优化后的程序 P′。若在 M 上乘法指令的 CPI 为 102，左移指令的 CPI 为 2，P 的执行时间是 P′执行时间的 1.2 倍，则 P 中有多少条乘法指令被替换成了左移指令执行？'
    )(
        section('分析解答')(
            p`P′的执行时间为 10s，P 比 P′多用了 2s，即多 200M×2=4×108个时钟周期，每条乘法指令比左移指令多 100 个时钟周期，因为 4×108/100=4×106，即有 400 万条乘法指令被替换为左移指令执行。`
        )
    )
).elem
