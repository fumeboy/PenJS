import { p, b, section, ol } from '@src/components/@write'
const title = '8.1　教学目标和内容安排'
const page = section(title)(
    p`${b`主要教学目标`}使学生了解现代计算机中各主要模块之间的总线互连方式，以及输入/输出系统涉及的软硬件概念和知识体系，为操作系统的学习打下坚实基础。本章主要内容包括文件的概念、与 I/O 系统调用相关的函数、基本的 C 标准 I/O 库函数、常用外设控制器（I/O 接口）的基本功能和结构、I/O 端口的编址方式、外设与主机之间的 I/O 控制方式以及如何利用陷阱指令将用户 I/O 请求转换为操作系统的 I/O 处理过程。`,
    p`${b`基本学习要求`}`,
    ol(
        p`了解 I/O 子系统层次结构。`,
        p`了解为何操作系统在 I/O 子系统中承担极其重要的作用。`,
        p`了解 I/O 子系统的基本特性。`,
        p`了解用户程序、C 语言函数库和内核之间的关系。`,
        p`了解 C 程序中 I/O 库函数到内核中相关系统调用服务例程之间的调用路径。`,
        p`了解 C 标准 I/O 库函数与类 UNIX 系统级 I/O 函数之间的关系。`,
        p`了解类 UNIX 系统中关于文件的基本概念。`,
        p`了解常用文件基本操作（创建/打开/读写/关闭文件、设置读写位置等）的含义。`,
        p`了解常用系统级 I/O 函数（creat/open/read/write/lseek/stat/fstat/close）的基本含义。`,
        p`理解常用 C 库函数和宏（如 fopen/getc/putc/getchar/putchar）的基本实现方法。`,
        p`理解头文件 stdio`,
        p`理解标准输入（stdin）、标准输出（stdout）和标准错误（stderr）的概念。`,
        p`理解如何利用流缓冲区来减少系统调用次数。`,
        p`理解为何要尽量减少系统调用次数。`,
        p`了解字符设备和块设备的基本特点。`,
        p`了解总线的作用、组成和不同分类。`,
        p`了解常用 I/O 总线标准。`,
        p`理解计算机如何通过总线连接各功能部件。`,
        p`了解 I/O 接口的功能和基本结构。`,
        p`理解 I/O 接口和 I/O 端口的差别。`,
        p`了解各种 I/O 接口类型的特点。`,
        p`理解 I/O 端口的编址方式。`,
        p`了解各种 I/O 传送控制方式的特点和适用场合。`,
        p`了解程序直接控制（查询）方式的特点和工作流程。`,
        p`了解中断 I/O 方式的特点和工作过程。`,
        p`理解外设发生什么事件可以向 CPU 提出中断请求。`,
        p`理解 CPU 响应中断的 3 个条件。`,
        p`理解 CPU 响应中断请求的过程。`,
        p`掌握调出中断服务程序的方法（软件查询或形成向量地址）。`,
        p`了解中断服务程序的结构框架（即中断处理过程）。`,
        p`理解断点保护和现场保护的不同。`,
        p`掌握现场保护和恢复的方法。`,
        p`了解中断允许触发器的作用以及应在何时开/关中断。`,
        p`理解中断服务程序调用和子程序调用的差别。`,
        p`理解中断接口电路（中断控制器）的结构。`,
        p`理解多重中断和中断屏蔽的概念。`,
        p`理解获取中断服务程序入口地址的过程。`,
        p`理解为什么要在中断处理开始时保护现场、结束时恢复现场。`,
        p`了解 DMA 方式适用的场合和特点。`,
        p`掌握 DMA 传送的过程。`,
        p`理解中断方式和 DMA 方式的差别。`,
        p`了解内核空间 I/O 软件的基本层次结构。`,
        p`了解设备驱动程序和中断服务程序之间的关系。`
    ),
    p`I/O 子系统主要指用于控制外设与内存、外设与 CPU 之间进行数据交换的软、硬件系统。实现输入/输出功能的关键是要解决以下一系列的问题：如何在 CPU、主存和外设之间建立一个高效的信息传输「通路」；怎样将用户的 I/O 请求转换成对设备的控制命令；如何使 CPU 方便地寻找到要访问的外设；I/O 硬件和 I/O 软件如何协调完成主机和外设之间的数据传送等。本章将围绕这些问题展开讲解。`,
    p`本章的内容主要包括 I/O 子系统概述和用户空间 I/O 软件、常用外设控制器（I/O 接口）的基本功能和结构、I/O 端口的编址方式、外设与主机之间的 I/O 控制方式以及内核空间 I/O 软件。`,
    p`对于 I/O 子系统概述和用户空间 I/O 软件，包括文件的概念、与 I/O 系统调用相关的函数、基本的 C 标准 I/O 库函数以及如何利用陷阱指令将用户 I/O 请求转换为操作系统的 I/O 处理过程。可以从 C 语言的标准 I/O 库函数（如 printf（）函数）出发，说明这些 I/O 库函数的大致实现过程，以使学生能深入理解输入/输出子系统的层次结构。`,
    p`对于常用输入/输出设备，因为设备的工作原理不属于主干内容，而且不同设备的工作原理差别较大，所以在课时有限的情况下，关于键盘、鼠标器、打印机和显示器等的工作原理可以跳过不讲。但是，如果学生对 I/O 设备的功能和结构一点不了解，那么要理解后续的如 I/O 接口等内容就比较困难，因此，可以简单讲解一下 I/O 设备的通用结构，以便让学生明白：设备与计算机主机之间有数据交换，如键盘和鼠标器的输入信息、打印机和显示器的输出信息等；计算机主机会向设备发送控制信息，如打印机的初始化、选通、自动走纸等命令；设备会向计算机主机回送状态信息，如打印机忙、缺纸、联机等状态信息。`,
    p`对于外设与 CPU 和主存的互连，着重介绍用于互连的系统总线所涉及的概念和知识体系。在此之前，学生已经对指令的执行、存储器的层次结构、CPU 设计等方面的内容有所了解，因此，可以从指令执行过程中涉及的部件之间的数据交换开始讲起，将总线和指令执行过程、总线和 CPU、cache、存储器、显卡等 I/O 接口联系起来，说明指令执行过程中可能需要在哪些部件之间进行数据交换，以及在每次数据交换过程中，在部件之间需要传送哪些信息，并说明传送这些信息的任务就是由总线完成的。这样既复习了所学的概念和知识，又将相关内容串接了起来，并且使得学生在学习具体的有关总线设计的内容之前，对总线的组成、职责和总线在计算机中的位置有较为全面的了解，从而有助于对有关总线设计内容的理解。`,
    p`对于 I/O 接口，因为不同设备对应的 I/O 接口的结构相差很大，而且各种接口的类型也很多，有限的课时无法讲清楚所有 I/O 接口的实现细节，所以本章主要关注 I/O 接口的通用结构和一般的功能。在这部分内容中，有关操作系统对 I/O 的支持，上课时可以跳过不讲，但是，如果学生课后能够很好地阅读这部分内容，则对于理解用户程序和操作系统之间的关系以及操作系统和硬件之间的关系都有好处，从而能更好地理解计算机的层次化结构。`,
    p`对于 I/O 传送控制方式以及内核空间 I/O 软件，主要要求学生对程序直接控制、中断和 DMA 三种基本 I/O 方式有所掌握，并理解不同的 I/O 方式与驱动程序之间的关系。本章首先讲清楚这些 I/O 方式的基本实现原理，并通过三种不同 I/O 方式的实现原理，使学生深刻理解硬件和操作系统之间如何协调完成输入/输出操作，特别是深刻理解 I/O 方式与操作系统层次中驱动程序之间的关系。`
).elem
