import { p, section } from '@src/components/@write'
const title = '8.2　主要内容提要'
const page = section(title)(
    section(`I/O 系统概述`)(
        p`I/O 子系统包含 I/O 软件和 I/O 硬件两大部分。I/O 软件包括最上层提出 I/O 请求的用户空间 I/O 软件（称为用户 I/O 软件）和在底层操作系统中对 I/O 进行具体管理和控制的内核空间 I/O 软件（称为系统 I/O 软件）。系统 I/O 软件又分三个层次，分别是与设备无关的 I/O 软件层、设备驱动程序层和中断服务程序层。`,
        p`操作系统在 I/O 子系统中承担着极其重要的作用。I/O 子系统具有共享性、复杂性和异步性三个特性。用户程序总是通过某种 I/O 函数或 I/O 操作符请求 I/O 操作。例如，用户程序需要读一个磁盘文件中的记录时，它可以通过调用 C 语言标准 I/O 库函数 fread（），也可以直接调用 read 系统调用的封装函数 read（）来提出 I/O 请求。不管用户程序中调用的是 C 库函数还是系统调用封装函数，最终都是通过操作系统内核提供的系统调用来实现 I/O。`
    ),
    section(`用户空间 I/O 软件`)(
        p`在用户空间 I/O 软件中，用户程序可以通过调用特定的 I/O 函数的方式提出 I/O 请求。在 UNIX/Linux 系统中，用户程序使用的 I/O 函数可以是 C 标准 I/O 库函数或系统调用的封装函数，前者如文件 I/O 函数 fopen（）、fread（）、fwrite（）和 fclose（）或控制台 I/O 函数 printf（）、putc（）、scanf（）和 getc（）等；后者如 open（）、read（）、write（）和 close（）等。`,
        p`C 标准 I/O 库函数和系统调用的封装函数两者属于不同的抽象层。标准 I/O 库函数比系统调用封装函数抽象层次高，后者属于系统级 I/O 函数，前者是基于后者实现的。两者都通过文件操作来操纵具体的外部设备，前者使用一个指针 fp（指向封装了文件描述符 fd 的 FILE 结构）表示文件，后者直接使用 fd 表示文件。`
    ),
    section(`外部设备及其与主机的互连`)(
        p`输入设备、输出设备和外存储器统称为外部设备，简称外设。键盘、鼠标、针式打印机等设备每次按单个数据为单位进行交换，属于字符型设备；磁盘、光盘、扫描仪等设备一旦被启动后，每次都会交换一块数据，属于成块传送设备。`,
        p`所有外设通过相应的电缆（通信总线）连到 I/O 接口电路上，I/O 接口电路再通过 I/O 总线连到主板上，最终通过存储器总线和处理器总线与主存和 CPU 相连。`,
        p`总线是计算机系统中部件或设备之间传送信息的公共通路，包括传输介质和相应的控制逻辑。根据总线所在位置，可以分为内部总线、系统总线和通信总线三类。内部总线指芯片内部连接各元件的总线，如 CPU 内部总线。系统总线指在计算机的主要功能部件（CPU、主存、I/O 接口）之间传送信息的总线，由数据线、地址线和控制线组成。根据所处位置和功能的不同，系统总线又可分为处理器总线、存储器总线和 I/O 总线。通常处理器总线和存储器总线是专用总线，而 I/O 总线是标准总线，如 PCI 总线、AGP 总线、PCI-Express 总线等。通信总线指用于主机和 I/O 设备之间或计算机系统之间通信的总线，如 RS-232 串行总线、USB 串行总线、SCSI 总线等。`,
        p`早期的系统总线多采用多数据线并行传输的同步总线，因为这种总线需要在多个数据位之间进行同步，限制了总线的时钟频率，因而目前总线的发展趋势多采用串行传输方式。例如早期曾经流行的 I/O 总线标准 ISA、EISA、PCI、APG 等都是并行传输的同步总线，现在主要采用串行总线标准 PCI-Express。`
    ),
    section(`I/O 接口的职能、结构和类型`)(
        p`I/O 接口是用于连接主机和外设并通过接收主机命令来对外设进行控制的部件的总称。例如，显卡、网卡、打印控制器、磁盘控制器等都属于 I/O 接口，有时也称为 I/O 模块。`,
        p`不同设备对应的 I/O 接口的功能不完全相同，其逻辑结构也不一样。但是，所有 I/O 接口的基本结构和职能是类似的。I/O 接口中，有用于存放输入/输出数据的数据缓冲器、用于记录设备或接口状态的状态寄存器、用于存放控制信息的命令（控制）寄存器等，这些寄存器分别称为数据端口、状态端口和命令端口。I/O 接口在主机一侧，通过 I/O 总线与主机相连，在外设一侧通过通信总线（电缆）与外设相连。通常 I/O 总线和通信总线的数据宽度不同，因此，在主机侧和外设侧的数据宽度不一样，因而在 I/O 接口中需要有进行数据格式转换的逻辑电路，此外，还需在主机侧和外设侧分别有相应的总线接口逻辑，以支持与 I/O 总线和通信总线的连接。`,
        p`I/O 接口的类型多种多样：按设备侧传输的位数来分，有并行接口和串行接口；按是否可以编程控制来分，有可编程接口和不可编程接口；按是否支持标准的通信总线来分，有通用接口和专用接口；按 I/O 方式来分，有无条件查询接口、条件查询接口、中断控制器接口及 DMA 控制器接口；按连接方式来分，有点对点接口和多点总线式接口。`
    ),
    section(`I/O 端口及其编址`)(
        p`I/O 端口指 I/O 接口中程序可访问的寄存器，有数据端口、命令端口和状态端口。通常用户程序不访问这些 I/O 端口，而由操作系统中的驱动程序访问。为了使指令能够访问到 I/O 端口，需要对它们进行编号，这些编号称为 I/O 端口编址（有时称为设备编址，实际上并不是对设备编址）。`,
        p`有独立编址和统一编址两种方式。独立编址方式下，对 I/O 端口单独编号，使它们成为一个独立的 I/O 地址空间，此时 I/O 端口号可能和主存单元号相同，因此，从地址形式上无法区分指令访问的是 I/O 端口还是主存单元，需要通过不同的操作码来区分，因而需要提供专门的 I/O 指令来控制对 I/O 端口的访问。统一编址方式下，I/O 端口与主存地址空间统一编号，将主存地址空间分出一部分地址编号给 I/O 端口进行编号，因此，也被称为存储器映射方式。因为主存单元和 I/O 端口在同一个地址空间，所以，主存单元号和 I/O 端口号肯定不会相同，它们分属两个不同的地址范围，因此，通过指令给出的地址范围就可以确定访问的是主存单元还是 I/O 端口，因而指令系统无需提供专门的 I/O 指令。`
    ),
    section(`常用 I/O 控制方式`)(
        p`目前，计算机中常用的 I/O 方式有程序直接控制、中断控制和 DMA 控制三种。`,
        p`程序直接控制方式分无条件传送和条件传送方式。无条件传送方式利用程序定时传送数据，无需检测接口或设备的状态，适合于各类巡回检测或过程控制；条件传送方式也称为程序查询方式，CPU 通过查询外设接口中的「就绪（ready）」「忙（busy）」和「完成（done）」等状态来控制数据的传送，有定时查询和独占查询两种，独占查询方式下，CPU 在整个数据交换过程中，一直为设备的 I/O 服务。`,
        p`中断控制方式也是一种通过执行程序来进行数据交换的 I/O 方式。当外设准备好数据、准备好接收新数据、发生了特殊事件时，外设通过向 CPU 发中断请求来使 CPU 转到相应的中断服务程序去执行，在中断服务程序中完成数据交换或处理特殊事件。中断方式下，由硬件和软件共同完成中断过程，首先，由 I/O 接口向 CPU 发中断请求，CPU 每执行完一条指令都去采样中断请求线，一旦发现有中断请求，并且处于「开中断（中断允许）」状态，CPU 就进入「中断响应」周期，自动执行一条隐指令，完成关中断、保护断点、识别中断源三项任务，识别中断源的结果就是将中断服务程序的首地址送到 PC 中。「中断响应」周期结束，CPU 就根据 PC 的值开始执行中断服务程序。在单级中断系统中，中断服务程序执行过程中一直不会开中断，直到中断返回前才执行「开中断」指令；而在多级中断系统中，中断处理过程可能被其他新中断打断。通过在每个中断服务程序中设置中断屏蔽字来实现是否允许打断。中断服务程序中还要进行现场的保护和恢复。`,
        p`DMA 控制方式适合像磁盘一类的高速设备以成批方式和主存直接交换数据：首先，要对 DMA 控制器进行初始化；其次，由 DMA 控制器控制总线在主存和高速设备之间进行直接数据交换；最后，DMA 控制器发出「DMA 传送结束」信号给外设接口，由外设接口发中断请求给 CPU，由 CPU 执行相应的中断服务程序来进行数据校验等，最终完成 DMA 传送处理。`
    ),
    section(`内核空间 I/O 软件`)(
        p`所有用户程序中提出的 I/O 请求，最终都是通过系统调用实现的，通过系统调用封装函数中的陷阱指令转入内核空间的 I/O 软件执行。内核空间的 I/O 软件分三个层次，分别是与设备无关的 I/O 软件层、设备驱动程序层和中断服务程序层，其中后两个层次与 I/O 硬件密切相关。前面提到的中断、DMA 等 I/O 方式实际上是指驱动程序中软件和 I/O 硬件打交道的方式，因而决定了驱动程序的模块结构，所以这部分是典型的软件和硬件密切关联的。`
    )
).elem
