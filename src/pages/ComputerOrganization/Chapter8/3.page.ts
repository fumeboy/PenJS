import { p, section } from '@src/components/@write'
const title = '8.3　基本术语解释'
const page = section(title)(
    section('用户 I/O 请求（user I/O request）')(
        p`用户 I/O 请求是位于用户空间的在用户态下执行的用户进程所提出的 I/O 请求。提出用户 I/O 请求的程序为用户空间 I/O 软件。`
    ),
    section('系统 I/O 软件（system level I/O processing program）')(
        p`系统 I/O 软件是在底层操作系统中对 I/O 进行具体管理和控制的内核空间 I/O 软件，分三个层次，分别是与设备无关的 I/O 软件层、设备驱动程序层和中断服务程序层。系统 I/O 软件是位于内核空间的在核心态下执行的 I/O 处理程序。`
    ),
    section('系统调用处理程序（system call processing program）')(
        p`在 Linux 中，有一个系统调用的统一入口，此处即是系统调用处理程序（system_call）的首地址，所以，CPU 执行指令 int$0x80 后，便转到程序 system_call 中第一条指令开始执行。`
    ),
    section('系统调用服务例程（system call handler）')(
        p`系统调用服务例程是指针对某个系统调用提供的特定的处理函数，例如，在 Linux 中，write 系统调用对应的服务例程为 sys_write 函数。`
    ),
    section('I/O 带宽（I/O bandwidth）')(
        p`I/O 带宽是指单位时间内系统输入/输出的数据量或所完成的 I/O 操作次数，即指在一定时间内所完成的工作量，也称为吞吐率（throughput）。`
    ),
    section('响应时间（response time）')(p`响应时间也称为等待时间（latency），是指从作业提交开始到作业完成所用的时间。`),
    section('外设（device）')(p`外部（辅助）存储设备和输入设备、输出设备统称为外设，也称为外围设备、外部设备或 I/O 设备。`),
    section('输入设备（input device）')(
        p`输入设备的作用是将程序、原始数据、文字、图像、控制命令或现场采集的数据等信息输入计算机。常见的输入设备有键盘、鼠标器、扫描仪等。`
    ),
    section('输出设备（output device）')(
        p`输出设备把计算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息以某种形式输出到计算机外部。常用的输出设备有显示终端（CRT/LCD）、打印机、绘图仪等。`
    ),
    section('外部存储设备（storage device）')(
        p`各种外部存储器称为外部存储设备，简称外存或辅存。可以把信息从外部存储设备输入主存，也可以把主存中的信息输出到存储设备上保存。典型的外存有硬盘、闪存、光盘和磁带等。`
    ),
    section('字符设备（character device）')(
        p`以字符为单位向主机发送或从主机接收一个字符流的设备称为字符设备。字符设备传送的字符流不能形成数据块，无法对其进行定位和寻址，例如键盘、打印机等。以字符为单位并不一定意味着是以字节为单位，例如，有的编码规则规定，1 个字符占 16bit，即两个字节。`
    ),
    section('块设备（block device）')(
        p`块设备以一个固定大小的数据块为单位与主机交换信息，通常外部存储器是块设备，例如磁盘驱动器、光盘驱动器和磁带机等。块设备中的数据块的大小通常在 512B 以上，它按照某种组织方式被写入或读出设备，每个数据块都有唯一的位置信息，因而是可寻址的。`
    ),
    section('终端（terminal）')(
        p`终端是指一种由 CRT 显示器、控制器及键盘合为一体的设备，它与平常所说的微型计算机的根本区别是没有自己的中央处理单元（CPU），当然也没有自己的内存，其主要功能是将键盘输入的请求数据发往主机（或打印机）并将主机运算的结果显示出来。对互联网而言，终端泛指一切可以接入网络的计算设备，如个人计算机、网络电视、可上网手机、PDA 等。`
    ),
    section('I/O 接口（I/O interface，I/O module）')(
        p`I/O 接口（I/O 模块）是主机和外设之间传送信息的「桥梁」，介于主机和外设之间。主机控制外设的命令信息、传送给外设的数据或从外设取来的数据以及外设送给主机的状态信息等都要先存放到 I/O 接口。对每种具体的设备来说，I/O 接口就是介于底板总线和通信总线（电缆式总线）之间的扩展卡或插件板，例如网卡、显示卡等。也有很多设备的接口电路集成在主板上，如声卡、Modem 卡、打印机控制卡、磁盘控制器、键盘/鼠标控制电路等已经基本上集成在主板上，只留一些电缆插座，以连接相应的外部设备。`
    ),
    section('设备控制器（I/O controller）')(p`设备控制器是指 I/O 接口中的控制电路，不包含 I/O 接口中的连接器插座，也称为 I/O 控制器。`),
    section('总线（bus）')(
        p`总线是共享的信息传输介质，用于连接若干设备，由一组传输线组成，信息通过这组传输线在设备之间被传送。总线按其所在的位置分为片内总线、系统总线和通信总线。`
    ),
    section('片内总线（internal bus）')(p`片内总线指芯片内部连接各元件的总线。例如，在 CPU 芯片内部，存在连接在各个寄存器、ALU 等各元件之间的总线。`),
    section('系统总线（system bus）')(
        p`系统总线是用来连接计算机硬件系统中若干主要部件（如 CPU、主存、I/O 模块）的总线。系统总线上传输的有数据、地址和控制信息。因此把系统总线也分成三组传输线：数据线、地址线和控制线，有时也把它们分别称为数据总线、地址总线和控制总线。系统总线可分为处理器总线、存储器总线和 I/O 总线。`,
        p`（注：Intel 公司推出的芯片组中，对系统总线赋予了特定的含义，把 CPU 连接到北桥芯片的总线称为系统总线，也称为处理器总线或前端总线（Front Side Bus，FSB）。CPU 通过前端总线连接到北桥芯片，进而通过北桥芯片和内存、显卡交换数据。`
    ),
    section('处理器总线（processor bus）')(
        p`早期 Intel 微处理器的处理器总线称为前端总线（Front Side Bus，FSB），它是主板上最快的总线，主要用作处理器与北桥芯片进行信息交换。`,
        p`Intel 推出 Core i7 时，北桥芯片的功能被集成到了 CPU 芯片内，CPU 通过存储器总线（即内存条插槽）直接和内存条相连，而在 CPU 芯片内部的核与核之间、CPU 芯片与其他 CPU 芯片之间以及 CPU 芯片与 IOH（Input/Output Hub）芯片之间，通过 QPI（Quick Path Interconnect）总线相连。`
    ),
    section('存储器总线（memory bus）')(
        p`在 Intel 公司早期推出的芯片组中，在 CPU 和主存之间有一个北桥芯片组，CPU 连接到北桥芯片的总线被称为处理器总线，也称为系统总线或前端总线；北桥芯片连到主存的总线被称为存储器总线。Core i7 以后的处理器芯片中集成了原先北桥芯片中的功能逻辑，包括内存控制器等，因此，在这种处理器架构的系统中，处理器通过存储器总线（内存条插槽）直接连接到内存条上。`
    ),
    section('I/O 总线（I/O bus）')(
        p`I/O 总线用于连接各种外设控制器（即 I/O 接口，如显卡、网卡等）与主机，通常是标准总线，如 PCI 总线、AGP 总线、PCI-Express 总线等。`
    ),
    section('通信总线（communication bus）')(
        p`通信总线用于主机和 I/O 设备之间或计算机系统之间的通信。由于这类连接涉及许多方面，包括距离远近、速度快慢、工作方式等，差异很大，因此通信总线的种类很多，如 RS-232 串行总线、USB 串行总线、SCSI 总线等。`
    ),
    section('底板式总线（backplane bus）')(
        p`总线按连线类型可分为电缆式、主板式和底板式。通常，通信总线采用电缆式总线形式，处理器总线和存储器总线采用主板式形式，而 I/O 总线采用底板式总线形式。`,
        p`底板式总线在主板上提供相应的扩展总线插槽，各种 I/O 接口模块（如网卡、显卡等）能够以 I/O 插件板卡的形式插入相应的插槽，以进行外部设备的扩展。为使各 I/O 插件板的插座之间具有通用性，底板总线通常是标准总线，使得不同厂家的 I/O 插件板可以互连、互换。`
    ),
    section('并行传输（parallel transfer）')(
        p`并行传输是指总线中传输的数据在数据线上同时有多位一起传送，每一位要有一根数据线，因此有多根数据线组成。其特点是同时可以传输多个数据，但数据之间必须要同步，而且因为数据线多，使得相互间干扰大，因而，数据传输的速度受到很大影响。`
    ),
    section('串行传输（serial transfer）')(
        p`串行传输是指总线中传输的数据在数据线上按位进行传输，因此只需要一根或两根数据信号线，线路的成本低，适合于远距离或者近距离快速数据传输。对于串行传输的总线，提高时钟速度比并行传输总线容易得多，且几乎没有线间串扰。因此，串行传输总线的速度可以比并行传输总线快得多。`
    ),
    section('总线事务（bus transaction）')(
        p`通常把在总线上一对设备之间的一次信息交换过程称为一个总线事务。把发出事务请求的部件称为主控设备或主设备（master），也称为起动者（Initiator）；将另一个部件称为从设备（Slave），也称目标（Target）。总线事务类型由其操作性质来定义。例如，存储器读事务是指将数据从主存取出到处理器，存储器写事务是指将数据写到主存。典型的总线事务类型有存储器读、存储器写、I/O 读、I/O 写、中断响应等。`
    ),
    section('总线传输周期（bus transmission cycle）')(
        p`总线传输周期是指在总线上完成一次总线事务所用的时间，通常由若干个总线时钟周期组成，简称总线周期。`
    ),
    section('总线宽度（bus width）')(
        p`总线中数据线的条数被称为总线宽度，即总线能同时传送的数据位数，它决定了每次能同时传输的数据信息的位数。用位表示时，也称为总线位宽；用字节表示时，其值为总线位宽/8。`
    ),
    section('总线时钟频率（bus clock frequency）')(
        p`总线中用于定时的公共时钟信号的频率就是总线时钟频率，常以 MHz、GHz 等为单位。这里 M 和 G 都是 10 的幂次。`
    ),
    section('总线传输速率（bus transfer speed）')(
        p`总线传输速率是指单位时间内传输数据的次数，也称为总线工作频率，常以 MT/s、GT/s 等为单位，分别表示每秒传输多少 M 次或多少 G 次数据。也有人会用 MHz、GHz 来作为总线工作频率的单位。早期的总线通常一个时钟周期传送一次数据，因此总线工作频率等于总线时钟频率。现在有些总线一个时钟周期可以传送 2 次或 4 次数据，因此总线工作频率是总线时钟频率的 2 倍或 4 倍。`
    ),
    section('总线带宽（bus bandwidth）')(
        p`总线带宽就是总线的最大数据传输率，即总线在进行数据传输时单位时间内在总线上可传输的最大数据量。它与总线宽度、总线工作频率等有关。用公式表示为 B=W×F/N（式中 B 为总线带宽，W 为总线宽度，F 为总线时钟频率，N 为传输一个数据所用的总线时钟周期数，因此 F/N 实际上为总线工作频率）。`
    ),
    section('突发传送方式（burst transmission）')(
        p`突发传送方式是一种连续的、成批数据传送方式。只需在传送开始时给出数据块的首地址，然后连续传送多个数据，后续数据的地址默认为前面数据地址加 1，实际上这些连续的数据一般在存储阵列的同一行上。在主存储器中有一个行缓冲（row buffer），在突发传送事务中，每次访问第一个数据时，都会读出一行数据到行缓冲，后面的连续数据就只要从行缓冲中源源不断地取出即可。所以，这种方式下，总线上能够实现一个时钟周期内传送多个数据。在总线宽度和工作频率相同的情况下，数据传输率大大高于不支持突发传送的总线。这种方式也称为背对背（back-to-back）传送方式。`
    ),
    section('I/O 端口（I/O port）')(p`I/O 接口中一些可被程序访问的寄存器，用来存放控制（命令）、数据和状态等信息，这些寄存器被称为 I/O 端口。`),
    section('命令（控制）端口（command/control port）')(
        p`在 I/O 接口中，用来存放 CPU 送来的控制信息的寄存器称为命令端口或控制端口，只可以对其进行写操作。`
    ),
    section('数据端口（data port）')(p`在 I/O 接口中，用于存放接收和发送数据的寄存器称为数据端口，可以对其进行读或写操作。`),
    section('状态端口（status port）')(
        p`在 I/O 接口中，用来记录外部设备或 I/O 接口状态的寄存器称为状态端口，通常只可以对其进行读操作。有些接口电路将命令端口和状态端口合二为一，作为命令端口时，从 CPU 写入控制信息；作为状态端口时，存入外设或接口的状态信息，供 CPU 读取。`
    ),
    section('I/O 地址空间（I/O address space）')(p`I/O 地址空间是指所有 I/O 端口号组成的地址空间，也简称为 I/O 空间。`),
    section('独立编址（special address space）')(
        p`独立编址是指将 I/O 端口和主存单元分别编号，不占用主存单元的地址空间，因而主存单元和 I/O 端口可能会有相同的编号，但地址位数大多不同，主存单元多，地址空间大，因而地址位数多；I/O 端口少，地址空间小，因而地址位数少。因为可能有相同的编号，指令中无法靠地址来区分要访问的是主存单元还是 I/O 端口，所以需要有和访存指令不同的操作码，因此需要设计专门的 I/O 指令。`
    ),
    section('统一编址（united address space）')(
        p`I/O 端口和主存单元统一编址，所以也称为存储器映射 I/O（memory-mapped I/O）方式。一个地址空间分成两部分，各在不同的地址段中，但地址的位数是相同的，可根据地址范围的不同来区分访问的是主存单元还是 I/O 端口，所以无需专门的输入/输出指令。`
    ),
    section('并行接口（parallel interface）')(p`并行接口在设备和接口之间同时传送一个字节或一个字的所有位。`),
    section('串行接口（serial interface）')(p`串行接口在设备和接口之间按位来传送数据。`),
    section('可编程接口（programmable interface）')(p`可编程接口能用程序来改变或选择接口的功能和操作方式。`),
    section('不可编程接口（non-programmable interface）')(p`不可编程接口不能用程序来改变其功能和操作方式，但可通过硬连线路来实现不同的功能。`),
    section('I/O 指令（I/O instruction）')(
        p`I/O 指令是指用来访问 I/O 端口的指令。指令中的操作码必须指出是读还是写，地址码必须说明信息在哪个端口和哪个通用寄存器之间进行传送，所以地址码中要给出端口号和通用寄存器编号，如 80x86 中的 IN 指令和 OUT 指令等。`
    ),
    section('程序查询 I/O 方式（I/O polling）')(
        p`程序查询 I/O 方式是指 CPU 通过执行查询程序来完成对外设的控制，实现和外设的数据传送。在查询程序中，CPU 首先通过读取状态端口中的状态信息，了解接口是否已「就绪」（或「完成」），若已「就绪」（或「完成」），就通过数据端口进行新的数据传送，并查询外设是否空闲。在外设空闲的情况下，通过发送控制信息到命令端口，然后由接口发「启动」命令送外设；如果接口没有就绪，或外设不空闲，则 CPU 继续查询，以等待接口就绪或外设空闲。所有信息（包括控制、数据、状态）的交换由查询程序中的 I/O 指令完成。`
    ),
    section('就绪状态（ready）')(
        p`对于输入设备而言，就绪状态意味着 I/O 接口中的数据缓冲器已准备好，CPU 可以从 I/O 接口取数据；对于输出设备而言，则说明 I/O 接口中的数据缓冲器已空，CPU 可以将数据送到 I/O 接口中。`
    ),
    section('程序中断 I/O 方式（I/O interrupt）')(
        p`程序中断 I/O 方式下，CPU 启动外设后，就转到另外一个程序执行，此时外设和 CPU 并行工作。一旦外设完成任务，便发中断请求给 CPU，告知 CPU 上次任务已经完成。此时，CPU 暂停正在执行的程序，转到一个中断服务程序进行中断处理，在中断处理过程中，进行外设下一步的准备工作（如传送下一个要打印的数据；取走键盘数据或采样数据，为下次输入腾空数据缓冲寄存器；等等），最后启动外设，并回到原程序继续执行。此时，CPU 和外设又能并行工作。`
    ),
    section('可编程中断控制器（Programmable Interrupt Controller，PIC）')(
        p`可编程的中断控制器即可编程的中断控制接口。中断控制器的基本功能包括以下几个方面：① 及时记录各种中断请求信号，通常用一个中断请求寄存器来保存；② 自动响应中断请求，CPU 在每条指令执行完后，会自动检测中断请求引脚，发现有中断请求后会自动响应中断；③ 在同时有多个中断请求时，能自动选择响应优先级最高的中断请求；④ 通过中断屏蔽实现多重中断的嵌套执行，中断屏蔽功能通常用一个中断屏蔽字寄存器来实现。`
    ),
    section('中断屏蔽（interrupt mask）')(
        p`中断系统允许 CPU 在执行某个中断服务程序时，被新的中断请求打断。但是并不是所有的中断处理都可被新的中断打断，对于一些重要的紧急事件的处理，就要设置成不可被其他新的中断事件打断，这就是中断屏蔽的概念。`
    ),
    section('中断屏蔽字（interrupt mask word）')(
        p`中断屏蔽机制使得每个中断可以设置它允许被哪些中断打断，不允许被哪些中断打断。这个功能主要通过在中断控制器中设置中断屏蔽字来实现。屏蔽字中的每一位对应某一个中断源，称为该中断源的中断屏蔽位，例如，用「1」表示允许中断，「0」表示不允许中断（即屏蔽中断）。CPU 可通过在程序中执行相应的 I/O 指令来修改屏蔽字的内容，从而动态地改变中断处理的先后次序。`
    ),
    section('中断屏蔽字寄存器（interrupt mask word register）')(p`中断屏弊字寄存器是指中断控制器中专门用来存放每个中断源对应的中断屏蔽字的寄存器。`),
    section('中断请求寄存器（interrupt request register）')(p`中断请求寄存器是指中断控制器中专门用来存放每个设备对应的中断请求信号的寄存器。`),
    section('中断响应优先级（interrupt response priority）')(
        p`中断响应优先级是指当多个中断请求发生时，优先响应哪个中断请求。它是由中断控制器中的硬件排队线路或中断查询程序的查询顺序决定的，不可动态改变。`
    ),
    section('中断处理优先级（interrupt process priority）')(
        p`中断处理优先级反映的是正在处理的中断是否比新发生的中断的处理优先级低（即屏蔽位为「0」，对新中断开放），如果是，就中止正在处理的中断，转到新中断服务程序去执行，处理完后回到原来被中止的中断服务程序继续执行。中断处理优先级可以由中断屏蔽字来动态改变。`
    ),
    section('多重中断（multiple interrupt）')(
        p`在中断处理（即执行中断服务程序）过程中，如果又有新的处理优先级更高的中断请求发生，那么 CPU 应立即中止正在执行的中断服务程序，转去处理新的中断，这种情况被称为多重中断或中断嵌套。`,
        p`直接存储器存取（Direct Memory Access，DMA）I/O 方式`,
        p`DMA 是 Direct Memory Access 的缩写。每次需要进行外设数据读写时，首先 CPU 把要传送的数据个数、数据块在内存的首址、数据传送的方向（是读操作还是写操作）、设备的地址等参数送给 DMA 控制器，然后发送一个命令给 DMA 接口，启动外设进行数据准备工作。在这些工作完成后，CPU 就继续进行其他工作。此时外设和 CPU 并行工作，而 I/O 设备和主存交换数据的事情就交给了 DMA 控制器。DMA 控制器在需要的时候申请总线控制权，占用总线完成 I/O 设备和主存间的数据传送。传送结束后，向 CPU 发送「DMA 结束」中断请求，让 CPU 进行数据校验等后处理工作。`,
        p`DMA 方式适用于像磁盘一类的高速设备（外存），以成批的方式和内存直接交换数据。`
    ),
    section('周期挪用（cycle stealing）')(
        p`周期挪用法的基本思想是，当外设准备好一个数据时，DMA 控制器就向 CPU 申请一次总线控制权，CPU 在一次总线操作结束时一旦发现有 DMA 请求，就立即释放总线，让出一个周期给 DMA 控制器，由 DMA 控制器控制总线在主存和外设之间传送一个数据，传送结束后立即释放总线，下次外设准备好数据时，又重复上述过程，直到所有数据传送完毕。这种情况下，CPU 的工作几乎不受影响，只是在万一出现访存冲突（即 CPU 和 DMA 控制器同时要求访问同一个主存）时，CPU 挪出一个周期给 DMA，由 DMA 访问主存，而 CPU 延迟访问主存。这里 CPU 挪用的是主存存取周期。`
    ),
    section('DMA 控制器（DMA controller）')(
        p`把 DMA 接口中控制数据传送的硬件逻辑称为 DMA 控制器。它能像 CPU 一样控制总线，完成 I/O 设备和主存间的数据传送。`
    ),
    section('设备驱动程序（device driver）')(
        p`设备驱动程序是与设备相关的 I/O 软件部分。每个设备驱动程序只处理一种外设或一类紧密相关的外设。每个外设或每类外设都有一个设备控制器，其中包含各种 I/O 端口。通过执行设备驱动程序，CPU 可以向控制端口发送控制命令来启动外设，可以从状态端口读取状态来了解外设或设备控制器的状态，也可以从数据端口中读取数据或向数据端口发送数据等。`
    )
).elem
