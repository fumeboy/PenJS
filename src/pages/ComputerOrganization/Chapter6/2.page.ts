import { p, section } from '@src/components/@write'
const title = '6.2　主要内容提要'
const page = section(title)(section(`存储器的分类`)(p`存储器按存取方式分为随机存取存储器、顺序存取存储器、直接存取存储器和相联存取存储器；按存储介质分为半导体存储器、磁表面存储器和光盘存储器；按信息可更改性分为可读可写存储器和只读存储器；按断电后可否保存分为易失性存储器和非易失性存储器；按功能、容量、速度三个方面分为寄存器、cache、主存储器（内存）、辅助存储器（外存）和海量后备存储器。`,),section(`存储器的分层结构`)(p`因为每一种单独的存储器都不是又快、又大、又便宜，为了构建这种理想的存储器系统，计算机中采用了一种层次化的存储器体系结构。按照速度从快到慢、容量从小到大、价格从贵到便宜的顺序，由近到远地将不同存储器设置在离 CPU 远近不同的地方，这样的顺序是「寄存器 →cache→ 主存 →SSD 或磁盘 → 光盘和磁带。」`,),section(`半导体随机存取存储器的组织`)(p`主存空间的随机存取存储器（Random Access Memory，RAM）区由若干内存条组成，每个内存条上有若干存储器芯片，存储器芯片由用于存储信息的存储阵列外加地址缓存器、地址译码器、读写控制电路等组成，每个存储阵列由若干行和若干列构成，每个行、列交叉处是一个记忆单元（存储元），每个记忆单元用来存储一位二进位 0 或 1。根据记忆单元结构的不同分为 SRAM 芯片和 DRAM 芯片两种，SRAM 芯片的记忆单元采用 6 管静态 MOS 管存储电路，其功耗大、集成度低，但速度快，无需再生和刷新，适合构作高速小容量的存储器，如 cache；DRAM 芯片的记忆单元采用单管动态 MOS 管存储电路，因为只用一个 MOS 管，所以功耗小、集成度高，但由于靠电容储存电荷和充放电来存储和读写信息，因此速度慢，并需定时刷新，适合构作慢速大容量的存储器（如主存）。`,),section(`只读存储器`)(p`只读存储器（Read Only Memory，ROM）中的信息用特殊方式写入，一经写入，就可长久保存，是非易失性存储器。其也以随机存取方式工作，主要用于存放固定信息，如微程序、BIOS、引导程序或嵌入式系统中固化的程序和数据等。只读存储器有 MROM、PROM、EPROM、EEPROM、Flash ROM 等几种类型。ROM 区也属于内存空间的一部分。`,),section(`存储器芯片及其与 CPU 的连接`)(p`RAM 芯片分为字片式和位片式两种。通常 DRAM 芯片都是位片式，DRAM 芯片采用多个位平面构成，每个位平面是一个二维的存储阵列。DRAM 芯片中的行地址和列地址共用同一组地址引脚，称为行列地址线复用。为提高存储器芯片的读写速度，DRAM 芯片内通常会有一个用 SRAM 实现的行缓存（row buffer）。`,p`存储器芯片和 CPU 之间通过总线相连。总线包括地址线、数据线和控制线。地址线的连接需要考虑芯片在字方向上的扩展，若采用芯片内连续编址方式，则地址的低位用于芯片内寻址，高位用于片选逻辑，片选信号译码器的输出连到芯片的片选信号引脚上；若采用交叉编址方式，则地址的高位用于芯片内寻址，低位用于片选逻辑。数据线的连接需要考虑芯片在位方向上的扩展，分别连到位扩展的芯片上；控制线的连接，包括读写信号、主存或 I/O 访问信号等。`,),section(`主存的主要技术指标`)(p`主存的主要技术指标包括存储容量、存取时间、存储周期和存储器带宽。存储容量是指某计算机实际配置的容量，它通常小于最大可配置容量（主存地址空间大小）；存取时间指执行一次读操作或写操作的时间，分读出时间和写入时间两种；存储周期指存储器进行连续两次独立的读或写操作所需的最小时间间隔，它通常大于存取时间；存储器带宽指单位时间内从存储器读出或写入存储器的最大信息量。`,),section(`磁盘存储器`)(p`磁盘存储器的主要技术指标包括：记录密度、平均存取时间、数据传输率等。记录密度包括道密度和位密度。道密度指单位长度上的磁道数；位密度为磁道中单位长度上的位数。平均存取时间指平均寻道时间和平均等待时间之和（数据传输时间相对较小，可忽略不计）。平均寻道时间指移动磁头到所读写磁道的平均时间；平均等待时间指要读写的扇区旋转到磁头下方所需的平均时间，等于磁盘旋转一圈所花时间的一半。数据传输率分为内部数据传输率和外部数据传输率。内部数据传输率与磁盘转速有关，指寻道和旋转等待后，单位时间内从存储介质上读出或写入的二进制信息量。外部数据传输率与磁盘转速无关，指磁盘接口（磁盘控制器）和磁盘缓存之间进行数据交换的数据传输率。`,),section(`高速缓存（cache）`)(p`cache 是在 CPU 的寄存器和主存之间设置的高速小容量的存储器。引入 cache 的目的是为了提高访存速度。与多模块存储器通过并行来提高速度不同，cache 之所以能提高速度，是因为程序执行时代码和数据的存储访问具有局部性特点。程序访问的局部性特点体现在两个方面：时间局部性和空间局部性。时间局部性指某个单元在一个很短的时间段内被重复访问的可能性很大；空间局部性指某个单元被访问后，其周围单元不久也将被访问的可能性很大。这样，只要将刚被访问的单元及其邻近单元一起复制到 cache 中，那么在最近一段时间内 CPU 访问的信息都可以在 cache 中访问到，而不需要访问慢速的主存。`,p`实现 cache 时需要解决一系列问题，例如，将主存中的一个局部信息块装入 cache 时，信息块大小多大？装入 cache 的何处？CPU 如何根据主存地址找到 cache 中相应的信息？cache 装满的情况下又要复制新的主存块到 cache 时，原来在 cache 中的哪些主存块应被替换出来？写信息时，如何保证主存中和 cache 中的同一个信息块完全一致？`,p`（1）cache 和主存间的映射关系`,p`将主存地址空间划分成大小相等的信息块，从 0 开始给每个块编号。cache 由若干行组成，每一行中有一个用于存放主存块的槽，其大小与主存块大小一样，cache 行也从 0 开始编号。在将主存块复制到 cache 行中时，主存块号和 cache 行号之间可采用直接映射、全相联映射和组相联映射三种映射关系。`,p`直接映射时，每个主存块对应一个固定的 cache 行，其映射关系为：cache 行号 = 主存块号 mod cache 行数。此时，主存地址划分为标记、cache 行号（行索引）和块内地址三个字段；全相联映射时，每个主存块可复制到任何一个 cache 行中，主存地址划分为标记和块内地址两个字段；组相联映射时，cache 分若干组，每组有多行，各主存块存放到固定组的任意行中，其映射关系为：cache 组号 = 主存块号 mod cache 组数，主存地址划分为标记、cache 组号（组索引）和块内地址三个字段。`,p`（2）CPU 访存过程`,p`CPU 给出主存地址后，首先根据映射方式对主存地址进行划分，根据行索引或组索引的值，确定将主存地址高位上的标记字段与哪些 cache 行中的标记进行比较。显然，对于直接映射，只需比较一个 cache 行；对于全相联映射，则需与所有行进行比较；对于组相联映射，则与组内所有行比较。若存在某个 cache 行中的标记与主存地址中的标记字段相等，并且该行中的有效位为 1，则访问命中，此时根据主存地址中低位上的块内地址访问该行中相应的信息；若所有行中的标记都不等于主存地址中的标记字段，或有相等的行但对应的有效位为 0，则访问不命中（缺失），此时，需要将该主存地址所在的块从主存取到 cache，并根据主存块的位置在 cache 行中置标记，且置有效位为 1。`,p`（3）替换算法`,p`当需要调入一个新的主存块而对应的 cache 行全满时，需要将这些 cache 行中的某个主存块替换出来。常用的替换算法有先进先出（FIFO）、最近最少用（LRU）等。FIFO 算法的基本思想是，总是淘汰最先调到 cache 的那个主存块；LRU 算法的基本思想是，总是淘汰最近最少用到的那个主存块。`,p`（4）写策略（一致性问题）`,p`CPU 执行写操作时，为了保证主存和 cache 中的同一个主存块的一致性，可采用回写法（write back）和全写法（write through）两种写策略。回写法的基本思想是，暂时只写 cache，替换时一次性将 cache 中的主存块写回主存；全写法的基本思想是，每次写 cache 的同时也写主存，为了加快写的过程，可在 cache 和主存间加一个写缓存（write buffer）。`,p`当写不命中时，有写分配法（write allocate）和非写分配法（not write allocate）两种方式。采用写分配法时，需要分配一个 cache 空行，以将主存块复制到 cache；采用非写分配法时，不将主存块复制到 cache。因此，回写策略下，一定采用写分配法，而全写策略下，两种分配方式都可以采用。`,p`（5）主存块大小的选择`,p`主存块大小是主存和 cache 之间进行信息交换的基本单位，其与命中率和缺失损失关系极大，因而块大小的选择非常重要。主存块太小，则不能很好地利用空间局部性，进而影响命中率；主存块太大，则增加主存块的读取时间，即缺失损失变大，而且，由于块变大，使得 cache 行数减少，映射到同一个 cache 行的主存块数增加，进而会使缺失率上升。`,),section(`虚拟存储器`)(p`虚拟存储管理是现代计算机系统中普遍采用的存储管理方式。在采用虚拟存储管理的计算机系统中，每个进程具有一个一致的、极大的、私有的虚拟地址空间，虚拟地址空间按等长的页来划分，主存也按等长的页框划分。进程执行时将当前用到的页面装入主存，其他暂时不用的部分放在磁盘上，通过页表建立虚拟页和主存页框之间的对应关系。对于不在主存的页面，在页表中记录其在磁盘上的地址。在指令执行过程中，由称为内存管理单元（Memory Managment Unit，MMU）的特殊硬件进行地址转换，从而实现存储访问。`,p`虚拟存储器的实现方式有分页式、分段式和段页式 3 种。CPU 执行指令时，通过指令寻址方式计算得到的有效地址通常是一个虚拟地址（即逻辑地址）。CPU 中的地址转换部件根据虚拟地址中的虚页号，找到对应的页表项，然后通过页表项得到该虚页号对应的页框号（即物理页号、实页号），最后将它和页内地址拼接得到物理地址（即主存地址、实地址）。`,p`每个进程有一个页表，每个页表项由有效（装入）位、使用位、修改位、存取权限位、主存页框号或磁盘地址等组成。在地址转换过程中，若对应页表项中的有效位为 0，则说明该页面不在主存中，即「缺页」，此时，CPU 调出操作系统的缺页处理程序执行，该程序从磁盘读入所需页面到主存，并修改页表。缺页处理后，必须回到原来发生缺页的指令重新执行。`,p`为了减少从主存访问页表的次数，通常将常用页表项放在 CPU 的一个高速缓存中，这个高速缓存被称为快表（Translation Lookaside Buffer，TLB）。`,p`可以利用虚拟存储管理机制进行存储保护。内存保护错误主要有地址越界和访问越权，通常称为访问违例或存储器访问异常。`,),section(`IA-32/Linux 中的地址转换`)(p`保护模式下，IA-32 采用段页式虚拟存储管理方式，存储空间采用逻辑地址、线性地址和物理地址来进行描述。逻辑地址就是通常所说的虚拟地址，IA-32 中的逻辑地址由 48 位组成，包含 16 位的段选择符和 32 位的段内偏移量（即有效地址）。为了便于多用户、多任务下的存储管理，IA-32 采用在分段基础上的分页机制。分段过程实现将逻辑地址转换为线性地址，分页过程再实现将线性地址转换为物理地址。`,)).elem